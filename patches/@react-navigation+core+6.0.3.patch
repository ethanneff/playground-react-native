diff --git a/node_modules/@react-navigation/core/lib/typescript/src/types.d.ts b/node_modules/@react-navigation/core/lib/typescript/src/types.d.ts
index afd9639..b71c0f1 100644
--- a/node_modules/@react-navigation/core/lib/typescript/src/types.d.ts
+++ b/node_modules/@react-navigation/core/lib/typescript/src/types.d.ts
@@ -1,4 +1,4 @@
-import type { DefaultRouterOptions, InitialState, NavigationAction, NavigationState, ParamListBase, PartialState, Route } from '@react-navigation/routers';
+import type {DefaultRouterOptions, InitialState, NavigationAction, NavigationState, ParamListBase, PartialState, Route} from '@react-navigation/routers';
 import type * as React from 'react';
 declare global {
     namespace ReactNavigation {
@@ -59,6 +59,9 @@ export declare type EventMapCore<State extends NavigationState> = {
         };
         canPreventDefault: true;
     };
+    tabPress: {
+        data: undefined
+    }
 };
 export declare type EventArg<EventName extends string, CanPreventDefault extends boolean | undefined = false, Data = undefined> = {
     /**
@@ -482,4 +485,5 @@ export declare type PathConfig<ParamList extends {}> = {
 export declare type PathConfigMap<ParamList extends {}> = {
     [RouteName in keyof ParamList]?: NonNullable<ParamList[RouteName]> extends NavigatorScreenParams<infer T, any> ? string | PathConfig<T> : string | Omit<PathConfig<{}>, 'screens' | 'initialRouteName'>;
 };
-export {};
+export { };
+
