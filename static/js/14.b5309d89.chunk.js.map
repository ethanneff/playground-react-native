{"version":3,"sources":["apps/Focus/ListSection.tsx","apps/Focus/ListItem.tsx","apps/Focus/configs.ts","apps/Focus/utils.ts","apps/Focus/Home.tsx","apps/Focus/ItemDetails.tsx","apps/Focus/index.tsx"],"names":["ListSection","memo","item","color","useColor","View","style","alignItems","borderTopColor","border","secondary","borderTopWidth","flexDirection","justifyContent","marginTop","padding","title","dayOfMonth","type","month","dayOfWeek","ListItem","showSection","currentItem","future","id","Date","now","iconColor","navigate","useNavigation","onPress","useCallback","borderColor","background","accent","primaryA","borderLeftWidth","flex","disabled","height","paddingHorizontal","paddingVertical","width","name","size","paddingRight","hour","zone","ellipsizeMode","numberOfLines","text","itemHeight","initialIndex","dayjs","startOf","add","diff","getItemLayout","_","index","length","offset","getCurrentItem","currentTime","before","setHours","getHours","after","getFirstItemOfDay","items","keyExtractor","String","getMoreItems","group","i","lastItem","valueOf","next","subtract","push","Math","random","format","Home","onLeftPress","useAdminNavBack","useState","loading","setLoading","setItems","addMoreItems","moreItems","styles","StyleSheet","create","list","opacity","position","renderItem","useEffect","setTimeout","FlatList","data","initialNumToRender","initialScrollIndex","inverted","keyboardShouldPersistTaps","onEndReached","onEndReachedThreshold","ActivityIndicator","ItemDetails","route","useRoute","onModalClose","onBackgroundPress","params","Stack","createStackNavigator","Navigator","screenOptions","rootScreenOptions","Screen","component"],"mappings":"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","file":"static/js/14.b5309d89.chunk.js","sourcesContent":["import React, {memo} from 'react';\nimport {View} from 'react-native';\nimport {Text} from '../../components';\nimport {useColor} from '../../hooks';\nimport {padding} from '../../utils';\nimport {Item} from './types';\n\ninterface Props {\n  item: Item;\n}\n\nexport const ListSection = memo(function ListSection({item}: Props) {\n  const color = useColor();\n  return (\n    <View\n      style={{\n        alignItems: 'center',\n        borderTopColor: color.border.secondary,\n        borderTopWidth: 1,\n        flexDirection: 'row',\n        justifyContent: 'center',\n        marginTop: padding(2),\n        padding: padding(2),\n      }}>\n      <Text title={item.dayOfMonth} type=\"h4\" />\n      <Text title={` ${item.month}, ${item.dayOfWeek}`} type=\"overline\" />\n    </View>\n  );\n});\n","import {useNavigation} from '@react-navigation/core';\nimport React, {memo, useCallback} from 'react';\nimport {View} from 'react-native';\nimport {Icon, Text, TouchableOpacity} from '../../components';\nimport {useColor} from '../../hooks';\nimport {padding} from '../../utils';\nimport {ListSection} from './ListSection';\nimport {HomeScreenNavigationProp, Item} from './types';\n\ninterface Props {\n  showSection: boolean;\n  item: Item;\n  currentItem: boolean;\n}\n\nexport const ListItem = memo(function ListItem({\n  showSection,\n  item,\n  currentItem,\n}: Props) {\n  const color = useColor();\n  const future = item.id > Date.now();\n  const iconColor = future ? 'tertiary' : 'positive';\n  const title = currentItem ? 'current' : future ? 'future' : item.title;\n  const {navigate} = useNavigation<HomeScreenNavigationProp>();\n\n  const onPress = useCallback(() => navigate('item', {item}), [item, navigate]);\n\n  return (\n    <View\n      style={{\n        borderColor: currentItem\n          ? color.background.accent\n          : color.background.primaryA,\n        borderLeftWidth: padding(1),\n        flex: 1,\n      }}>\n      <TouchableOpacity\n        disabled={future}\n        onPress={onPress}\n        style={{\n          flex: 1,\n          flexDirection: 'row',\n          height: padding(10),\n          paddingHorizontal: padding(4),\n          paddingVertical: padding(2),\n        }}>\n        <View\n          style={{\n            flexDirection: 'row',\n            width: padding(20),\n          }}>\n          <Icon\n            color={iconColor}\n            name={future ? 'cancel' : 'checkbox-blank-circle'}\n            size={14}\n            style={{paddingRight: padding(1)}}\n          />\n          <Text title={`${item.hour} ${item.zone}`} />\n        </View>\n        <Text\n          ellipsizeMode=\"tail\"\n          numberOfLines={1}\n          style={{\n            color: color.text.secondary,\n            flex: 1,\n          }}\n          title={title}\n          type=\"body1\"\n        />\n      </TouchableOpacity>\n      {showSection && <ListSection item={item} />}\n    </View>\n  );\n});\n","import {padding} from '../../utils';\n\nexport const itemHeight = padding(10);\nexport const infiniteScrollRegeneration = 100;\n","import dayjs from 'dayjs';\nimport {infiniteScrollRegeneration, itemHeight} from './configs';\nimport {Item} from './types';\n\nexport const initialIndex =\n  dayjs().startOf('day').add(2, 'day').diff(dayjs(), 'hour') - 4;\n\nexport const getItemLayout = (\n  _: Item[] | null | undefined,\n  index: number,\n): {length: number; offset: number; index: number} => ({\n  length: itemHeight,\n  offset: itemHeight * index,\n  index,\n});\n\nexport const getCurrentItem = (item: Item): boolean => {\n  const currentTime = new Date();\n  const before = currentTime.setHours(currentTime.getHours() - 1);\n  const after = currentTime.setHours(currentTime.getHours() + 1);\n  const between = item.id > before && item.id < after;\n  return between;\n};\n\nexport const getFirstItemOfDay = (\n  index: number,\n  item: Item,\n  items: Item[],\n): boolean =>\n  index < 1 ? false : item.dayOfMonth !== items[index - 1].dayOfMonth;\n\nexport const keyExtractor = (item: Item): string => String(item.id);\n\nexport const getMoreItems = (items: Item[]): Item[] => {\n  const group = [...items];\n  for (let i = 0; i < infiniteScrollRegeneration; i++) {\n    const lastItem =\n      group.length === 0\n        ? dayjs().startOf('day').add(2, 'day').valueOf()\n        : group[group.length - 1].id;\n    const next = dayjs(lastItem).subtract(1, 'hour');\n    const id = next.valueOf();\n    group.push({\n      title: String(Math.random()) + String(Math.random()),\n      dayOfMonth: next.format('D'),\n      dayOfWeek: next.format('ddd'),\n      hour: next.format('h'),\n      id,\n      month: next.format('MMM'),\n      zone: next.format('a'),\n    });\n  }\n  return group;\n};\n","import React, {memo, useCallback, useEffect, useState} from 'react';\nimport {\n  ActivityIndicator,\n  FlatList,\n  ListRenderItem,\n  StyleSheet,\n} from 'react-native';\nimport {Screen} from '../../components';\nimport {useAdminNavBack} from '../../hooks';\nimport {ListItem} from './ListItem';\nimport {Item} from './types';\nimport {\n  getCurrentItem,\n  getFirstItemOfDay,\n  getItemLayout,\n  getMoreItems,\n  initialIndex,\n  keyExtractor,\n} from './utils';\n\n// TODO: flatlist on web\n\nexport const Home = memo(function Home() {\n  const {onLeftPress} = useAdminNavBack();\n  const [loading, setLoading] = useState(true);\n  const [items, setItems] = useState<Item[]>(() => getMoreItems([]));\n\n  const addMoreItems = useCallback(() => {\n    const moreItems = getMoreItems(items);\n    setItems(moreItems);\n  }, [items]);\n\n  const styles = StyleSheet.create({\n    list: {\n      opacity: loading ? 0 : 1,\n    },\n    loading: {\n      height: '100%',\n      position: 'absolute',\n      width: '100%',\n    },\n  });\n\n  const renderItem = useCallback<ListRenderItem<Item>>(\n    ({item, index}) => (\n      <ListItem\n        currentItem={getCurrentItem(item)}\n        item={item}\n        showSection={getFirstItemOfDay(index, item, items)}\n      />\n    ),\n    [items],\n  );\n\n  useEffect(() => {\n    if (loading && items.length > 0) setTimeout(() => setLoading(false), 1000);\n  }, [items.length, loading]);\n\n  return (\n    <Screen border onLeftPress={onLeftPress} title=\"Focus\">\n      <FlatList\n        data={items}\n        getItemLayout={getItemLayout}\n        initialNumToRender={0}\n        initialScrollIndex={initialIndex}\n        inverted\n        keyExtractor={keyExtractor}\n        keyboardShouldPersistTaps=\"handled\"\n        onEndReached={addMoreItems}\n        onEndReachedThreshold={0.5}\n        renderItem={renderItem}\n        style={styles.list}\n      />\n      {loading && <ActivityIndicator size=\"large\" style={styles.loading} />}\n    </Screen>\n  );\n});\n","import {useNavigation, useRoute} from '@react-navigation/core';\nimport React, {memo, useCallback} from 'react';\nimport {Modal, Text} from '../../components';\nimport {ItemScreenNavigationProp, ItemScreenRouteProp} from './types';\n\nexport const ItemDetails = memo(function ItemDetails() {\n  const {navigate} = useNavigation<ItemScreenNavigationProp>();\n  const route = useRoute<ItemScreenRouteProp>();\n\n  const onModalClose = useCallback(() => {\n    navigate('home');\n  }, [navigate]);\n\n  return (\n    <Modal onBackgroundPress={onModalClose}>\n      <Text title={route.params.item.title || 'empty'} />\n    </Modal>\n  );\n});\n","import {createStackNavigator} from '@react-navigation/stack';\nimport React, {memo} from 'react';\nimport {rootScreenOptions} from '../../providers/Navigation/configs';\nimport {Home} from './Home';\nimport {ItemDetails} from './ItemDetails';\nimport {StackParamList} from './types';\n\nconst Stack = createStackNavigator<StackParamList>();\n\nexport default memo(function Focus() {\n  return (\n    <Stack.Navigator screenOptions={rootScreenOptions}>\n      <Stack.Screen component={Home} name=\"home\" />\n      <Stack.Screen component={ItemDetails} name=\"item\" />\n    </Stack.Navigator>\n  );\n});\n"],"sourceRoot":""}