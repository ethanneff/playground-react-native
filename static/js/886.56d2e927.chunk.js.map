{"version":3,"file":"static/js/886.56d2e927.chunk.js","mappings":"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","sources":["apps/Focus/screens/CategoryDetail/index.tsx","apps/Focus/screens/Journal/ListSection.tsx","apps/Focus/screens/Journal/ListItem.tsx","apps/Focus/configs.ts","apps/Focus/screens/Journal/utils.ts","apps/Focus/screens/Journal/index.tsx","apps/Focus/screens/JournalDetail/index.tsx","apps/Focus/screens/Profile/index.tsx","apps/Focus/screens/Progress/CategoryCard.tsx","apps/Focus/screens/Progress/index.tsx","apps/Focus/navigation.tsx","apps/Focus/index.tsx"],"sourcesContent":["import { RouteProp } from '@react-navigation/core';\nimport { useNavigation, useRoute } from '@react-navigation/native';\nimport { StackNavigationProp } from '@react-navigation/stack';\nimport React, { memo, useCallback } from 'react';\nimport { Modal, Text } from '../../../../components';\nimport { AuthStackRoutes } from '../../types';\n\nexport const CategoryDetail = memo(function CategoryDetail() {\n  const { navigate } =\n    useNavigation<StackNavigationProp<AuthStackRoutes, 'category-detail'>>();\n  const route = useRoute<RouteProp<AuthStackRoutes, 'category-detail'>>();\n\n  const onModalClose = useCallback(() => {\n    navigate('home');\n  }, [navigate]);\n\n  return (\n    <Modal onBackgroundPress={onModalClose}>\n      <Text title=\"category detail\" />\n      {/* <Activity site=\"random\" title=\"Deep Work\" username=\"random\" /> */}\n      <Text title={route?.params?.category?.id} />\n      <Text title={route?.params?.category?.name} />\n      <Text title={route?.params?.category?.total.toString()} />\n    </Modal>\n  );\n});\n","import React, { memo } from 'react';\nimport { View } from 'react-native';\nimport { Text } from '../../../../components';\nimport { padding } from '../../../../features';\nimport { Item } from '../../types';\n\ntype Props = {\n  item: Item;\n};\n\nexport const ListSection = memo(function ListSection({ item }: Props) {\n  return (\n    <View\n      style={{\n        alignItems: 'center',\n        flexDirection: 'row',\n        justifyContent: 'center',\n        padding: padding(2),\n      }}\n    >\n      <Text title={item.dayOfMonth} type=\"h4\" />\n      <Text title={` ${item.month}, ${item.dayOfWeek}`} type=\"overline\" />\n    </View>\n  );\n});\n","import { useNavigation } from '@react-navigation/core';\nimport { StackNavigationProp } from '@react-navigation/stack';\nimport React, { memo, useCallback } from 'react';\nimport { View } from 'react-native';\nimport { Icon, Text, TouchableOpacity } from '../../../../components';\nimport { padding, useColor, useDropShadow } from '../../../../features';\nimport { AuthStackRoutes, Item } from '../../types';\nimport { ListSection } from './ListSection';\n\ntype Props = {\n  currentItem: boolean;\n  item: Item;\n  showFooter: boolean;\n  showHeader: boolean;\n};\n\nexport const ListItem = memo(function ListItem({\n  showHeader,\n  item,\n  showFooter,\n  currentItem,\n}: Props) {\n  const color = useColor();\n  const dropShadow = useDropShadow();\n  const future = item.id > Date.now();\n  const iconColor = future ? 'tertiary' : 'positive';\n  const title = currentItem ? 'current' : future ? 'future' : item.title;\n  const { navigate } =\n    useNavigation<StackNavigationProp<AuthStackRoutes, 'home'>>();\n\n  const onPress = useCallback(\n    () => navigate('journal-detail', { item }),\n    [item, navigate],\n  );\n\n  return (\n    <View\n      style={{\n        width: '100%',\n        overflow: showFooter ? 'visible' : 'hidden',\n        paddingHorizontal: padding(4),\n      }}\n    >\n      <View\n        style={{\n          flex: 1,\n          marginTop: showHeader ? padding(4) : padding(0),\n          paddingBottom: showFooter ? padding(2) : padding(0),\n          backgroundColor: color.background.primaryA,\n          borderTopRightRadius: showHeader ? padding(4) : 0,\n          borderTopLeftRadius: showHeader ? padding(4) : 0,\n          borderBottomRightRadius: showFooter ? padding(4) : 0,\n          borderBottomLeftRadius: showFooter ? padding(4) : 0,\n          borderColor: currentItem\n            ? color.background.accent\n            : color.background.primaryA,\n          borderLeftWidth: padding(1),\n          ...dropShadow(2),\n        }}\n      >\n        {showHeader && <ListSection item={item} />}\n        <TouchableOpacity\n          disabled={future}\n          onPress={onPress}\n          style={{\n            flex: 1,\n            flexDirection: 'row',\n            paddingHorizontal: padding(4),\n            paddingVertical: padding(2),\n          }}\n        >\n          <View\n            style={{\n              flexDirection: 'row',\n              width: padding(20),\n            }}\n          >\n            <Icon\n              color={iconColor}\n              name={future ? 'cancel' : 'checkbox-blank-circle'}\n              size={14}\n              style={{ paddingRight: padding(1) }}\n            />\n            <Text title={`${item.hour} ${item.zone}`} />\n          </View>\n          <Text\n            color=\"secondary\"\n            ellipsizeMode=\"tail\"\n            flex\n            numberOfLines={1}\n            title={title}\n            type=\"body1\"\n          />\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n});\n","import { padding } from '../../features';\n\nexport const itemHeight = padding(10);\nexport const infiniteScrollRegeneration = 100;\n","import dayjs from 'dayjs';\nimport { infiniteScrollRegeneration, itemHeight } from '../../configs';\nimport { Item } from '../../types';\n\nexport const initialIndex =\n  dayjs().startOf('day').add(2, 'day').diff(dayjs(), 'hour') - 4;\n\nexport const getItemLayout = (\n  _: Item[] | null | undefined,\n  index: number,\n): { index: number; length: number; offset: number } => ({\n  length: itemHeight,\n  offset: itemHeight * index,\n  index,\n});\n\nexport const getCurrentItem = (item: Item): boolean => {\n  const currentTime = new Date();\n  const before = currentTime.setHours(currentTime.getHours() - 1);\n  const after = currentTime.setHours(currentTime.getHours() + 1);\n  return item.id > before && item.id < after;\n};\n\nexport const getFirstItemOfDay = (\n  index: number,\n  item: Item,\n  items: Item[],\n): boolean =>\n  index >= items.length - 1\n    ? false\n    : item.dayOfMonth !== items[index + 1].dayOfMonth;\n\nexport const getLastItemOfDay = (\n  index: number,\n  item: Item,\n  items: Item[],\n): boolean =>\n  index < 1 ? true : item.dayOfMonth !== items[index - 1].dayOfMonth;\n\nexport const keyExtractor = (item: Item): string => String(item.id);\n\nexport const getMoreItems = (items: Item[]): Item[] => {\n  const group = [...items];\n  for (let i = 0; i < infiniteScrollRegeneration; i++) {\n    const lastItem =\n      group.length === 0\n        ? dayjs().startOf('day').add(2, 'day').valueOf()\n        : group[group.length - 1].id;\n    const next = dayjs(lastItem).subtract(1, 'hour');\n    const id = next.valueOf();\n    group.push({\n      title: String(Math.random()) + String(Math.random()),\n      dayOfMonth: next.format('D'),\n      dayOfWeek: next.format('ddd'),\n      hour: next.format('h'),\n      id,\n      month: next.format('MMM'),\n      zone: next.format('a'),\n    });\n  }\n  return group;\n};\n","import React, { memo, useCallback, useEffect, useState } from 'react';\nimport {\n  ActivityIndicator,\n  FlatList,\n  ListRenderItem,\n  StyleSheet,\n} from 'react-native';\nimport { Screen } from '../../../../components';\nimport { padding, useAdminNavBack, useColor } from '../../../../features';\nimport { Item } from '../../types';\nimport { ListItem } from './ListItem';\nimport {\n  getCurrentItem,\n  getFirstItemOfDay,\n  getItemLayout,\n  getLastItemOfDay,\n  getMoreItems,\n  initialIndex,\n  keyExtractor,\n} from './utils';\n\nexport const Journal = memo(function Journal() {\n  const color = useColor();\n  const { onLeftPress } = useAdminNavBack();\n  const [loading, setLoading] = useState(true);\n  const [items, setItems] = useState<Item[]>(() => getMoreItems([]));\n\n  const addMoreItems = useCallback(() => {\n    const moreItems = getMoreItems(items);\n    setItems(moreItems);\n  }, [items]);\n\n  const styles = StyleSheet.create({\n    list: {\n      backgroundColor: color.background.secondary,\n      opacity: loading ? 0 : 1,\n      paddingVertical: padding(4),\n    },\n    loading: {\n      height: '100%',\n      position: 'absolute',\n      width: '100%',\n    },\n  });\n\n  const renderItem = useCallback<ListRenderItem<Item>>(\n    ({ item, index }) => (\n      <ListItem\n        currentItem={getCurrentItem(item)}\n        item={item}\n        showFooter={getLastItemOfDay(index, item, items)}\n        showHeader={getFirstItemOfDay(index, item, items)}\n      />\n    ),\n    [items],\n  );\n\n  useEffect(() => {\n    if (loading && items.length > 0) setTimeout(() => setLoading(false), 1000);\n  }, [items.length, loading]);\n\n  return (\n    <Screen dropShadow onLeftPress={onLeftPress} title=\"Journal\">\n      <FlatList\n        data={items}\n        getItemLayout={getItemLayout}\n        initialNumToRender={0}\n        initialScrollIndex={initialIndex}\n        inverted\n        keyExtractor={keyExtractor}\n        keyboardShouldPersistTaps=\"handled\"\n        onEndReached={addMoreItems}\n        onEndReachedThreshold={0.5}\n        renderItem={renderItem}\n        style={styles.list}\n      />\n      {loading && <ActivityIndicator size=\"large\" style={styles.loading} />}\n    </Screen>\n  );\n});\n","import { RouteProp } from '@react-navigation/core';\nimport { useNavigation, useRoute } from '@react-navigation/native';\nimport { StackNavigationProp } from '@react-navigation/stack';\nimport React, { memo, useCallback, useState } from 'react';\nimport { Modal, Text, TextInput } from '../../../../components';\nimport { AuthStackRoutes } from '../../types';\n\nexport const JournalDetail = memo(function JournalDetail() {\n  const { navigate } =\n    useNavigation<StackNavigationProp<AuthStackRoutes, 'journal-detail'>>();\n  const route = useRoute<RouteProp<AuthStackRoutes, 'journal-detail'>>();\n\n  const onModalClose = useCallback(() => {\n    navigate('home');\n  }, [navigate]);\n\n  const [form, setForm] = useState({ notes: '', effort: '' });\n\n  const onChange = (key: string) => (value: string) => {\n    setForm((p) => ({ ...p, [key]: value }));\n  };\n\n  return (\n    <Modal onBackgroundPress={onModalClose}>\n      <Text title={route?.params?.item?.title || 'empty'} />\n\n      <Text title=\"Effort\" />\n      <TextInput\n        onChangeText={onChange('effort')}\n        placeholder=\"what did you do?\"\n        value={form.effort}\n      />\n      <Text title=\"Focus?\" />\n      <Text title=\"Intensity?\" />\n\n      <Text title=\"notes\" />\n      <TextInput\n        multiline\n        numberOfLines={5}\n        onChangeText={onChange('notes')}\n        placeholder=\"notes\"\n        value={form.notes}\n      />\n      <Text title=\"goal\" />\n      <Text emphasis=\"low\" title=\"categories...\" />\n    </Modal>\n  );\n});\n","import React, { memo } from 'react';\nimport { ScrollView, View } from 'react-native';\nimport { Button, Card, Screen, Text } from '../../../../components';\nimport { padding, useColor } from '../../../../features';\n\nexport const Profile = memo(function Profile() {\n  const color = useColor();\n\n  return (\n    <Screen dropShadow title=\"Profile\">\n      <ScrollView\n        contentContainerStyle={{\n          paddingHorizontal: padding(4),\n          paddingVertical: padding(2),\n        }}\n        style={{ backgroundColor: color.background.secondary }}\n      >\n        <Card>\n          <Text\n            emphasis=\"medium\"\n            style={{ paddingBottom: padding(2) }}\n            title=\"Profile\"\n            type=\"h4\"\n          />\n          <View\n            style={{\n              flexDirection: 'row',\n              alignItems: 'center',\n              justifyContent: 'space-between',\n            }}\n          >\n            <Text title=\"avatar\" />\n            <View>\n              <Text title=\"name\" />\n              <Text title=\"email\" />\n            </View>\n          </View>\n          <Button color=\"accent\" title=\"upgrade to premium\" />\n          <Button title=\"reset password\" />\n          <Button title=\"delete account\" />\n          <Button title=\"restore transactions\" />\n          <Button title=\"log out\" />\n        </Card>\n\n        <Card>\n          <Text\n            emphasis=\"medium\"\n            style={{ paddingBottom: padding(2) }}\n            title=\"Preferences\"\n            type=\"h4\"\n          />\n          <Button title=\"intervals\" />\n          <Button title=\"notifications\" />\n          <Button title=\"theme\" />\n        </Card>\n\n        <Card>\n          <Text\n            emphasis=\"medium\"\n            style={{ paddingBottom: padding(2) }}\n            title=\"App\"\n            type=\"h4\"\n          />\n          <Button title=\"support\" />\n          <Button title=\"feedback\" />\n          <Button title=\"about\" />\n          <Button title=\"terms of use\" />\n          <Button title=\"privacy policy\" />\n        </Card>\n      </ScrollView>\n    </Screen>\n  );\n});\n","import { useNavigation } from '@react-navigation/core';\nimport { StackNavigationProp } from '@react-navigation/stack';\nimport dayjs, { Dayjs } from 'dayjs';\nimport isToday from 'dayjs/plugin/isToday';\nimport React, { memo, useCallback } from 'react';\nimport { FlatList, View } from 'react-native';\nimport { Text, TouchableOpacity } from '../../../../components';\nimport { padding, useColor } from '../../../../features';\nimport { AuthStackRoutes, Category } from '../../types';\ndayjs.extend(isToday);\n\ntype Props = {\n  category: Category;\n};\n\nconst mockData = [\n  1, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 22, 2, 2, 2, 2, 2,\n  2, 2, 2, 2, 2, 22, 2, 2, 2, 2, 22,\n];\n\nconst day = dayjs();\nconst isWeekend = (d: Dayjs) => d.day() === 0 || d.day() === 6;\n\nexport const CategoryCard = memo(function CategoryCard({ category }: Props) {\n  const { navigate } = useNavigation<StackNavigationProp<AuthStackRoutes>>();\n  const color = useColor();\n\n  const handleCategoryPress = (categoryPress: Category) => () => {\n    navigate('category-detail', { category: categoryPress });\n  };\n\n  const renderItem = useCallback(\n    ({ index }) => {\n      const historical = day.subtract(index, 'day');\n      const weekend = isWeekend(historical);\n      const today = historical.isToday();\n      const borderBottomColor = today\n        ? color.border.accent\n        : weekend\n        ? color.border.secondary\n        : color.background.primaryA;\n      const borderColor = today\n        ? color.border.accent\n        : color.background.secondary;\n      return (\n        <View\n          style={{\n            backgroundColor: color.background.secondary,\n            padding: 2,\n            borderWidth: 1,\n            borderColor,\n            borderBottomColor,\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <Text\n            center\n            style={{ color: color.background.secondary }}\n            title=\"XX\"\n          />\n          <Text\n            center\n            style={{ position: 'absolute' }}\n            title={historical.format('D')}\n            type=\"overline\"\n          />\n        </View>\n      );\n    },\n    [\n      color.background.primaryA,\n      color.background.secondary,\n      color.border.accent,\n      color.border.secondary,\n    ],\n  );\n\n  return (\n    <TouchableOpacity\n      onPress={handleCategoryPress(category)}\n      style={{\n        paddingVertical: padding(2),\n      }}\n    >\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n        }}\n      >\n        <Text emphasis=\"high\" title={category.name} type=\"h5\" />\n        {category.total ? (\n          <Text emphasis=\"low\" title={`${category.total}h`} type=\"h6\" />\n        ) : null}\n      </View>\n      <FlatList\n        data={mockData}\n        horizontal\n        inverted\n        renderItem={renderItem}\n        showsHorizontalScrollIndicator={false}\n        style={{ marginTop: padding(2) }}\n      />\n    </TouchableOpacity>\n  );\n});\n","import React, { memo } from 'react';\nimport { ScrollView } from 'react-native';\nimport { Calendar, Card, Screen, Text } from '../../../../components';\nimport { padding, useColor } from '../../../../features';\nimport { Category } from '../../types';\nimport { CategoryCard } from './CategoryCard';\n\n// TODO: create CategoryDetail screen (activity, stats [total, streak, best], details, schedule [offdays])\n// TODO: click on category card opens CategoryDetail\n\n// TODO: update activity to remove Card, Title, allow for custom interaction on item press, allow for forever scroll back\n// TODO: create DailyDetail screen (view list of activity for that day)\n\n// TODO: create SegmentDetail screen (focus, intensity, category, notes)\n\n// TODO: how to track milestones\n// TODO: show journal for calendar press\n// TODO: show deep work count on calendar (as opacity color dot)\n// TODO: show streak per item (as opacity color dot)\n// TODO: allow way to sort and add new categories\n// TODO: make categories as flatlist\n// TODO: intensity + focus = deep work splash screen (with rotating captions... e.g. where focus goes, energy flows)\n\nconst categories: Category[] = [\n  { id: '7', name: 'Ship Apps', total: 4 },\n  { id: '6', name: 'Grow Muscle', total: 3 },\n  { id: '5', name: 'Profit on Investments', total: 0 },\n  { id: '4', name: 'Master Leetcode', total: 23 },\n  { id: '3', name: 'Master System Design', total: 1 },\n  { id: '2', name: 'Lead Others', total: 12 },\n].sort((a, b) => b.total - a.total);\n\nexport const Progress = memo(function Progress() {\n  const color = useColor();\n\n  return (\n    <Screen dropShadow title=\"Progress\">\n      <ScrollView\n        contentContainerStyle={{\n          paddingHorizontal: padding(4),\n          paddingVertical: padding(2),\n        }}\n        style={{ backgroundColor: color.background.secondary }}\n      >\n        <Card>\n          <Text\n            emphasis=\"medium\"\n            style={{ paddingBottom: padding(2) }}\n            title=\"Activity\"\n            type=\"h4\"\n          />\n          <Calendar />\n        </Card>\n        <Card>\n          <Text\n            emphasis=\"medium\"\n            style={{ paddingBottom: padding(2) }}\n            title=\"Categories\"\n            type=\"h4\"\n          />\n          {categories.map((category) => (\n            <CategoryCard category={category} key={category.id} />\n          ))}\n        </Card>\n      </ScrollView>\n    </Screen>\n  );\n});\n","import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport React, { ReactElement } from 'react';\nimport { useNavScreenOptions } from '../../features';\nimport { CategoryDetail, Journal, Landing, Profile, Progress } from './screens';\nimport { JournalDetail } from './screens/JournalDetail';\nimport { AuthStackRoutes, HomeTabRoutes, UnAuthStackRoutes } from './types';\n\nconst AuthStack = createStackNavigator<AuthStackRoutes>();\nconst UnAuthStack = createStackNavigator<UnAuthStackRoutes>();\nconst TabBar = createBottomTabNavigator<HomeTabRoutes>();\n\ntype TabIcons = {\n  [key in keyof HomeTabRoutes]: { focused: string; unFocused: string };\n};\n\nconst tabIcons: TabIcons = {\n  journal: {\n    focused: 'format-list-bulleted',\n    unFocused: 'format-list-bulleted',\n  },\n  progress: {\n    focused: 'calendar-month',\n    unFocused: 'calendar-month',\n  },\n  profile: {\n    focused: 'account-outline',\n    unFocused: 'account-outline',\n  },\n};\n\nconst Tabs = () => {\n  const { tabScreenOptions } = useNavScreenOptions();\n  const screenOptions = tabScreenOptions({ tabIcons, titleShown: true });\n  return (\n    <TabBar.Navigator screenOptions={screenOptions}>\n      <TabBar.Screen component={Journal} name=\"journal\" />\n      <TabBar.Screen component={Progress} name=\"progress\" />\n      <TabBar.Screen component={Profile} name=\"profile\" />\n    </TabBar.Navigator>\n  );\n};\n\nexport const Navigation = (): ReactElement => {\n  const { modalScreenOptions } = useNavScreenOptions();\n  const login = false;\n\n  return login ? (\n    <UnAuthStack.Navigator screenOptions={modalScreenOptions}>\n      <UnAuthStack.Screen component={Landing} name=\"landing\" />\n    </UnAuthStack.Navigator>\n  ) : (\n    <AuthStack.Navigator screenOptions={modalScreenOptions}>\n      <AuthStack.Screen component={Tabs} name=\"home\" />\n      <AuthStack.Screen component={JournalDetail} name=\"journal-detail\" />\n      <AuthStack.Screen component={CategoryDetail} name=\"category-detail\" />\n    </AuthStack.Navigator>\n  );\n};\n","import React, { memo } from 'react';\nimport { Navigation } from './navigation';\n\nexport default memo(function Focus() {\n  return <Navigation />;\n});\n"],"names":["CategoryDetail","memo","navigate","useNavigation","route","useRoute","onModalClose","useCallback","onBackgroundPress","title","params","category","id","name","total","toString","ListSection","item","View","style","alignItems","flexDirection","justifyContent","padding","dayOfMonth","type","month","dayOfWeek","ListItem","showHeader","showFooter","currentItem","color","useColor","dropShadow","useDropShadow","future","Date","now","iconColor","onPress","width","overflow","paddingHorizontal","flex","marginTop","paddingBottom","backgroundColor","background","primaryA","borderTopRightRadius","borderTopLeftRadius","borderBottomRightRadius","borderBottomLeftRadius","borderColor","accent","borderLeftWidth","disabled","paddingVertical","size","paddingRight","hour","zone","ellipsizeMode","numberOfLines","itemHeight","initialIndex","dayjs","startOf","add","diff","getItemLayout","_","index","length","offset","getCurrentItem","currentTime","before","setHours","getHours","after","getFirstItemOfDay","items","getLastItemOfDay","keyExtractor","String","getMoreItems","group","i","lastItem","valueOf","next","subtract","push","Math","random","format","Journal","onLeftPress","useAdminNavBack","useState","loading","setLoading","setItems","addMoreItems","moreItems","styles","StyleSheet","list","secondary","opacity","height","position","renderItem","useEffect","setTimeout","FlatList","data","initialNumToRender","initialScrollIndex","inverted","keyboardShouldPersistTaps","onEndReached","onEndReachedThreshold","ActivityIndicator","JournalDetail","notes","effort","form","setForm","onChange","key","value","p","onChangeText","placeholder","multiline","emphasis","Profile","ScrollView","contentContainerStyle","isToday","mockData","day","CategoryCard","categoryPress","d","historical","weekend","today","borderBottomColor","border","borderWidth","center","horizontal","showsHorizontalScrollIndicator","categories","sort","a","b","Progress","map","AuthStack","createStackNavigator","TabBar","createBottomTabNavigator","tabIcons","journal","focused","unFocused","progress","profile","Tabs","screenOptions","tabScreenOptions","useNavScreenOptions","titleShown","Navigator","Screen","component","Navigation","modalScreenOptions"],"sourceRoot":""}