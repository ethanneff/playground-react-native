{"version":3,"sources":["apps/Focus/screens/CategoryDetail/index.tsx","apps/Focus/screens/Interval/ListSection.tsx","apps/Focus/screens/Interval/ListItem.tsx","apps/Focus/configs.ts","apps/Focus/screens/Interval/utils.ts","apps/Focus/screens/Interval/index.tsx","apps/Focus/screens/IntervalDetail/index.tsx","apps/Focus/screens/Profile/index.tsx","apps/Focus/screens/Progress/index.tsx","apps/Focus/navigation.tsx","apps/Focus/index.tsx"],"names":["CategoryDetail","memo","navigate","useNavigation","route","useRoute","onModalClose","useCallback","onBackgroundPress","title","params","category","id","name","total","toString","ListSection","item","color","useColor","View","style","alignItems","borderTopColor","border","secondary","borderTopWidth","flexDirection","justifyContent","marginTop","padding","dayOfMonth","type","month","dayOfWeek","ListItem","showSection","currentItem","future","Date","now","iconColor","onPress","borderColor","background","accent","primaryA","borderLeftWidth","flex","disabled","paddingHorizontal","paddingVertical","width","size","paddingRight","hour","zone","ellipsizeMode","numberOfLines","itemHeight","initialIndex","dayjs","startOf","add","diff","getItemLayout","_","index","length","offset","getCurrentItem","currentTime","before","setHours","getHours","after","getFirstItemOfDay","items","keyExtractor","String","getMoreItems","group","i","lastItem","valueOf","next","subtract","push","Math","random","format","Interval","onLeftPress","useAdminNavBack","useState","loading","setLoading","setItems","addMoreItems","moreItems","styles","StyleSheet","create","list","opacity","height","position","renderItem","useEffect","setTimeout","dropShadow","FlatList","data","initialNumToRender","initialScrollIndex","inverted","keyboardShouldPersistTaps","onEndReached","onEndReachedThreshold","ActivityIndicator","IntervalDetail","notes","effort","form","setForm","onChange","key","value","p","onChangeText","placeholder","multiline","emphasis","Profile","Progress","handleCategoryPress","contentContainerStyle","backgroundColor","site","username","map","bold","AuthStack","createStackNavigator","TabBar","createBottomTabNavigator","tabIcons","interval","focused","unFocused","progress","profile","Tabs","screenOptions","tabScreenOptions","useNavScreenOptions","Navigator","Screen","component","Navigation","modalScreenOptions"],"mappings":"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","file":"static/js/16.ed9ed4a5.chunk.js","sourcesContent":["import { RouteProp } from '@react-navigation/core';\nimport { useNavigation, useRoute } from '@react-navigation/native';\nimport { StackNavigationProp } from '@react-navigation/stack';\nimport React, { memo, useCallback } from 'react';\nimport { Modal, Text } from '../../../../components';\nimport { AuthStackRoutes } from '../../types';\n\nexport const CategoryDetail = memo(function CategoryDetail() {\n  const { navigate } =\n    useNavigation<StackNavigationProp<AuthStackRoutes, 'category-detail'>>();\n  const route = useRoute<RouteProp<AuthStackRoutes, 'category-detail'>>();\n\n  const onModalClose = useCallback(() => {\n    navigate('home');\n  }, [navigate]);\n\n  return (\n    <Modal onBackgroundPress={onModalClose}>\n      <Text title=\"category detail\" />\n      {/* <Activity site=\"random\" title=\"Deep Work\" username=\"random\" /> */}\n      <Text title={route?.params?.category?.id} />\n      <Text title={route?.params?.category?.name} />\n      <Text title={route?.params?.category?.total.toString()} />\n    </Modal>\n  );\n});\n","import React, { memo } from 'react';\nimport { View } from 'react-native';\nimport { Text } from '../../../../components';\nimport { padding, useColor } from '../../../../features';\nimport { Item } from '../../types';\n\ntype Props = {\n  item: Item;\n};\n\nexport const ListSection = memo(function ListSection({ item }: Props) {\n  const color = useColor();\n  return (\n    <View\n      style={{\n        alignItems: 'center',\n        borderTopColor: color.border.secondary,\n        borderTopWidth: 1,\n        flexDirection: 'row',\n        justifyContent: 'center',\n        marginTop: padding(2),\n        padding: padding(2),\n      }}\n    >\n      <Text title={item.dayOfMonth} type=\"h4\" />\n      <Text title={` ${item.month}, ${item.dayOfWeek}`} type=\"overline\" />\n    </View>\n  );\n});\n","import { useNavigation } from '@react-navigation/core';\nimport { StackNavigationProp } from '@react-navigation/stack';\nimport React, { memo, useCallback } from 'react';\nimport { View } from 'react-native';\nimport { Icon, Text, TouchableOpacity } from '../../../../components';\nimport { padding, useColor } from '../../../../features';\nimport { AuthStackRoutes, Item } from '../../types';\nimport { ListSection } from './ListSection';\n\ntype Props = {\n  showSection: boolean;\n  item: Item;\n  currentItem: boolean;\n};\n\nexport const ListItem = memo(function ListItem({\n  showSection,\n  item,\n  currentItem,\n}: Props) {\n  const color = useColor();\n  const future = item.id > Date.now();\n  const iconColor = future ? 'tertiary' : 'positive';\n  const title = currentItem ? 'current' : future ? 'future' : item.title;\n  const { navigate } =\n    useNavigation<StackNavigationProp<AuthStackRoutes, 'home'>>();\n\n  const onPress = useCallback(\n    () => navigate('interval-detail', { item }),\n    [item, navigate],\n  );\n\n  return (\n    <View\n      style={{\n        borderColor: currentItem\n          ? color.background.accent\n          : color.background.primaryA,\n        borderLeftWidth: padding(1),\n        flex: 1,\n      }}\n    >\n      <TouchableOpacity\n        disabled={future}\n        onPress={onPress}\n        style={{\n          flex: 1,\n          flexDirection: 'row',\n          paddingHorizontal: padding(4),\n          paddingVertical: padding(2),\n        }}\n      >\n        <View\n          style={{\n            flexDirection: 'row',\n            width: padding(20),\n          }}\n        >\n          <Icon\n            color={iconColor}\n            name={future ? 'cancel' : 'checkbox-blank-circle'}\n            size={14}\n            style={{ paddingRight: padding(1) }}\n          />\n          <Text title={`${item.hour} ${item.zone}`} />\n        </View>\n        <Text\n          color=\"secondary\"\n          ellipsizeMode=\"tail\"\n          flex\n          numberOfLines={1}\n          title={title}\n          type=\"body1\"\n        />\n      </TouchableOpacity>\n      {showSection && <ListSection item={item} />}\n    </View>\n  );\n});\n","import { padding } from '../../features';\n\nexport const itemHeight = padding(10);\nexport const infiniteScrollRegeneration = 100;\n","import dayjs from 'dayjs';\nimport { infiniteScrollRegeneration, itemHeight } from '../../configs';\nimport { Item } from '../../types';\n\nexport const initialIndex =\n  dayjs().startOf('day').add(2, 'day').diff(dayjs(), 'hour') - 4;\n\nexport const getItemLayout = (\n  _: Item[] | null | undefined,\n  index: number,\n): { length: number; offset: number; index: number } => ({\n  length: itemHeight,\n  offset: itemHeight * index,\n  index,\n});\n\nexport const getCurrentItem = (item: Item): boolean => {\n  const currentTime = new Date();\n  const before = currentTime.setHours(currentTime.getHours() - 1);\n  const after = currentTime.setHours(currentTime.getHours() + 1);\n  return item.id > before && item.id < after;\n};\n\nexport const getFirstItemOfDay = (\n  index: number,\n  item: Item,\n  items: Item[],\n): boolean =>\n  index < 1 ? false : item.dayOfMonth !== items[index - 1].dayOfMonth;\n\nexport const keyExtractor = (item: Item): string => String(item.id);\n\nexport const getMoreItems = (items: Item[]): Item[] => {\n  const group = [...items];\n  for (let i = 0; i < infiniteScrollRegeneration; i++) {\n    const lastItem =\n      group.length === 0\n        ? dayjs().startOf('day').add(2, 'day').valueOf()\n        : group[group.length - 1].id;\n    const next = dayjs(lastItem).subtract(1, 'hour');\n    const id = next.valueOf();\n    group.push({\n      title: String(Math.random()) + String(Math.random()),\n      dayOfMonth: next.format('D'),\n      dayOfWeek: next.format('ddd'),\n      hour: next.format('h'),\n      id,\n      month: next.format('MMM'),\n      zone: next.format('a'),\n    });\n  }\n  return group;\n};\n","import React, { memo, useCallback, useEffect, useState } from 'react';\nimport {\n  ActivityIndicator,\n  FlatList,\n  ListRenderItem,\n  StyleSheet,\n} from 'react-native';\nimport { Screen } from '../../../../components';\nimport { useAdminNavBack } from '../../../../features';\nimport { Item } from '../../types';\nimport { ListItem } from './ListItem';\nimport {\n  getCurrentItem,\n  getFirstItemOfDay,\n  getItemLayout,\n  getMoreItems,\n  initialIndex,\n  keyExtractor,\n} from './utils';\n\nexport const Interval = memo(function Interval() {\n  const { onLeftPress } = useAdminNavBack();\n  const [loading, setLoading] = useState(true);\n  const [items, setItems] = useState<Item[]>(() => getMoreItems([]));\n\n  const addMoreItems = useCallback(() => {\n    const moreItems = getMoreItems(items);\n    setItems(moreItems);\n  }, [items]);\n\n  const styles = StyleSheet.create({\n    list: {\n      opacity: loading ? 0 : 1,\n    },\n    loading: {\n      height: '100%',\n      position: 'absolute',\n      width: '100%',\n    },\n  });\n\n  const renderItem = useCallback<ListRenderItem<Item>>(\n    ({ item, index }) => (\n      <ListItem\n        currentItem={getCurrentItem(item)}\n        item={item}\n        showSection={getFirstItemOfDay(index, item, items)}\n      />\n    ),\n    [items],\n  );\n\n  useEffect(() => {\n    if (loading && items.length > 0) setTimeout(() => setLoading(false), 1000);\n  }, [items.length, loading]);\n\n  return (\n    <Screen dropShadow onLeftPress={onLeftPress} title=\"Hourly\">\n      <FlatList\n        data={items}\n        getItemLayout={getItemLayout}\n        initialNumToRender={0}\n        initialScrollIndex={initialIndex}\n        inverted\n        keyExtractor={keyExtractor}\n        keyboardShouldPersistTaps=\"handled\"\n        onEndReached={addMoreItems}\n        onEndReachedThreshold={0.5}\n        renderItem={renderItem}\n        style={styles.list}\n      />\n      {loading && <ActivityIndicator size=\"large\" style={styles.loading} />}\n    </Screen>\n  );\n});\n","import { RouteProp } from '@react-navigation/core';\nimport { useNavigation, useRoute } from '@react-navigation/native';\nimport { StackNavigationProp } from '@react-navigation/stack';\nimport React, { memo, useCallback, useState } from 'react';\nimport { TextInput } from 'react-native-gesture-handler';\nimport { Modal, Text } from '../../../../components';\nimport { AuthStackRoutes } from '../../types';\n\nexport const IntervalDetail = memo(function IntervalDetail() {\n  const { navigate } =\n    useNavigation<StackNavigationProp<AuthStackRoutes, 'interval-detail'>>();\n  const route = useRoute<RouteProp<AuthStackRoutes, 'interval-detail'>>();\n\n  const onModalClose = useCallback(() => {\n    navigate('home');\n  }, [navigate]);\n\n  const [form, setForm] = useState({ notes: '', effort: '' });\n\n  const onChange = (key: string) => (value: string) => {\n    setForm((p) => ({ ...p, [key]: value }));\n  };\n\n  return (\n    <Modal onBackgroundPress={onModalClose}>\n      <Text title={route?.params?.item?.title || 'empty'} />\n\n      <Text title=\"Effort\" />\n      <TextInput\n        onChangeText={onChange('effort')}\n        placeholder=\"what did you do?\"\n        value={form.effort}\n      />\n      <Text title=\"Focus?\" />\n      <Text title=\"Intensity?\" />\n\n      <Text title=\"notes\" />\n      <TextInput\n        multiline\n        numberOfLines={5}\n        onChangeText={onChange('notes')}\n        placeholder=\"notes\"\n        value={form.notes}\n      />\n      <Text title=\"goal\" />\n      <Text emphasis=\"low\" title=\"categories...\" />\n    </Modal>\n  );\n});\n","import React, { memo } from 'react';\nimport { Button, Screen, Text } from '../../../../components';\n\nexport const Profile = memo(function Profile() {\n  return (\n    <Screen dropShadow title=\"Profile\">\n      <Text title=\"Profile\" />\n      <Button title=\"delete account\" />\n      <Button title=\"log out\" />\n      <Button title=\"notifications settings\" />\n      <Button title=\"theme\" />\n      <Button title=\"restore purchases\" />\n    </Screen>\n  );\n});\n","import { useNavigation } from '@react-navigation/core';\nimport { StackNavigationProp } from '@react-navigation/stack';\nimport React, { memo } from 'react';\nimport { View } from 'react-native';\nimport { ScrollView } from 'react-native-gesture-handler';\nimport { Activity, Card, Screen, Text } from '../../../../components';\nimport { padding, useColor } from '../../../../features';\nimport { AuthStackRoutes, Category } from '../../types';\n\n// TODO: create CategoryDetail screen (activity, stats [total, streak, best], details, schedule [offdays])\n// TODO: click on category card opens CategoryDetail\n\n// TODO: update activity to remove Card, Title, allow for custom interaction on item press, allow for forever scroll back\n// TODO: create DailyDetail screen (view list of activity for that day)\n\n// TODO: create SegmentDetail screen (focus, intensity, category, notes)\n\nexport const Progress = memo(function Progress() {\n  const { navigate } = useNavigation<StackNavigationProp<AuthStackRoutes>>();\n  const color = useColor();\n\n  const categories: Category[] = [\n    { id: '7', name: 'Ship Apps', total: 4 },\n    { id: '6', name: 'Grow Muscle', total: 3 },\n    { id: '5', name: 'Profit on Investments', total: 12 },\n    { id: '4', name: 'Master Leetcode', total: 23 },\n    { id: '3', name: 'Master System Design', total: 1 },\n    { id: '2', name: 'Lead Others', total: 12 },\n  ];\n\n  const handleCategoryPress = (category: Category) => () => {\n    navigate('category-detail', { category });\n  };\n\n  return (\n    <Screen dropShadow title=\"Daily\">\n      <ScrollView\n        contentContainerStyle={{\n          padding: padding(4),\n        }}\n        style={{ backgroundColor: color.background.secondary }}\n      >\n        <Activity site=\"random\" title=\"Deep Work\" username=\"random\" />\n        {categories.map((category) => (\n          <Card key={category.id} onPress={handleCategoryPress(category)}>\n            <View\n              style={{\n                flexDirection: 'row',\n                justifyContent: 'space-between',\n                alignItems: 'center',\n              }}\n            >\n              <Text\n                bold={false}\n                emphasis=\"high\"\n                title={category.name}\n                type=\"h5\"\n              />\n              <Text\n                emphasis=\"low\"\n                title={category.total.toString()}\n                type=\"h6\"\n              />\n            </View>\n          </Card>\n        ))}\n      </ScrollView>\n    </Screen>\n  );\n});\n","import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport React, { ReactElement } from 'react';\nimport { useNavScreenOptions } from '../../features';\nimport {\n  CategoryDetail,\n  Interval,\n  IntervalDetail,\n  Landing,\n  Profile,\n  Progress,\n} from './screens';\nimport { AuthStackRoutes, HomeTabRoutes, UnAuthStackRoutes } from './types';\n\nconst AuthStack = createStackNavigator<AuthStackRoutes>();\nconst UnAuthStack = createStackNavigator<UnAuthStackRoutes>();\nconst TabBar = createBottomTabNavigator<HomeTabRoutes>();\n\nconst tabIcons = {\n  interval: {\n    focused: 'format-list-bulleted',\n    unFocused: 'format-list-bulleted',\n  },\n  progress: {\n    focused: 'calendar-month',\n    unFocused: 'calendar-month',\n  },\n  profile: {\n    focused: 'account-outline',\n    unFocused: 'account-outline',\n  },\n};\n\nconst Tabs = () => {\n  const { tabScreenOptions } = useNavScreenOptions();\n  const screenOptions = tabScreenOptions({ tabIcons });\n  return (\n    <TabBar.Navigator screenOptions={screenOptions}>\n      <TabBar.Screen component={Interval} name=\"interval\" />\n      <TabBar.Screen component={Progress} name=\"progress\" />\n      <TabBar.Screen component={Profile} name=\"profile\" />\n    </TabBar.Navigator>\n  );\n};\n\nexport const Navigation = (): ReactElement => {\n  const { modalScreenOptions } = useNavScreenOptions();\n  const login = false;\n\n  return login ? (\n    <UnAuthStack.Navigator screenOptions={modalScreenOptions}>\n      <UnAuthStack.Screen component={Landing} name=\"landing\" />\n    </UnAuthStack.Navigator>\n  ) : (\n    <AuthStack.Navigator screenOptions={modalScreenOptions}>\n      <AuthStack.Screen component={Tabs} name=\"home\" />\n      <AuthStack.Screen component={IntervalDetail} name=\"interval-detail\" />\n      <AuthStack.Screen component={CategoryDetail} name=\"category-detail\" />\n    </AuthStack.Navigator>\n  );\n};\n","import React, { memo } from 'react';\nimport { Navigation } from './navigation';\n\nexport default memo(function Focus() {\n  return <Navigation />;\n});\n"],"sourceRoot":""}