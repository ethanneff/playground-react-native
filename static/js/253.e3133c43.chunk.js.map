{"version":3,"file":"static/js/253.e3133c43.chunk.js","mappings":"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","sources":["../node_modules/@react-navigation/elements/lib/module/Screen.tsx","../node_modules/@react-navigation/bottom-tabs/lib/module/utils/BottomTabBarHeightCallbackContext.tsx","../node_modules/@react-navigation/bottom-tabs/lib/module/utils/BottomTabBarHeightContext.tsx","../node_modules/@react-navigation/elements/lib/module/MissingIcon.tsx","../node_modules/@react-navigation/native/lib/module/useLinkBuilder.tsx","../node_modules/@react-navigation/native/lib/module/useLinkProps.tsx","../node_modules/@react-navigation/native/lib/module/useLinkTo.tsx","../node_modules/@react-navigation/native/lib/module/Link.tsx","../node_modules/@react-navigation/bottom-tabs/lib/module/views/Badge.tsx","../node_modules/@react-navigation/bottom-tabs/lib/module/views/TabBarIcon.tsx","../node_modules/@react-navigation/bottom-tabs/lib/module/views/BottomTabItem.tsx","../node_modules/@react-navigation/bottom-tabs/lib/module/views/BottomTabBar.tsx","../node_modules/@react-navigation/bottom-tabs/lib/module/utils/useIsKeyboardShown.tsx","../node_modules/@react-navigation/elements/lib/module/ResourceSavingView.tsx","../node_modules/@react-navigation/bottom-tabs/lib/module/views/ScreenFallback.tsx","../node_modules/@react-navigation/bottom-tabs/lib/module/views/BottomTabView.tsx","../node_modules/@react-navigation/bottom-tabs/lib/module/navigators/createBottomTabNavigator.tsx"],"sourcesContent":["import {\n  NavigationContext,\n  NavigationProp,\n  NavigationRouteContext,\n  ParamListBase,\n  RouteProp,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport { StyleProp, StyleSheet, View, ViewStyle } from 'react-native';\nimport {\n  useSafeAreaFrame,\n  useSafeAreaInsets,\n} from 'react-native-safe-area-context';\n\nimport Background from './Background';\nimport getDefaultHeaderHeight from './Header/getDefaultHeaderHeight';\nimport HeaderHeightContext from './Header/HeaderHeightContext';\nimport HeaderShownContext from './Header/HeaderShownContext';\n\ntype Props = {\n  focused: boolean;\n  modal?: boolean;\n  navigation: NavigationProp<ParamListBase>;\n  route: RouteProp<ParamListBase>;\n  header: React.ReactNode;\n  headerShown?: boolean;\n  headerStatusBarHeight?: number;\n  headerTransparent?: boolean;\n  style?: StyleProp<ViewStyle>;\n  children: React.ReactNode;\n};\n\nexport default function Screen(props: Props) {\n  const dimensions = useSafeAreaFrame();\n  const insets = useSafeAreaInsets();\n\n  const isParentHeaderShown = React.useContext(HeaderShownContext);\n  const parentHeaderHeight = React.useContext(HeaderHeightContext);\n\n  const {\n    focused,\n    modal = false,\n    header,\n    headerShown = true,\n    headerTransparent,\n    headerStatusBarHeight = isParentHeaderShown ? 0 : insets.top,\n    navigation,\n    route,\n    children,\n    style,\n  } = props;\n\n  const [headerHeight, setHeaderHeight] = React.useState(() =>\n    getDefaultHeaderHeight(dimensions, modal, headerStatusBarHeight)\n  );\n\n  return (\n    <Background\n      accessibilityElementsHidden={!focused}\n      importantForAccessibility={focused ? 'auto' : 'no-hide-descendants'}\n      style={[styles.container, style]}\n    >\n      <View style={styles.content}>\n        <HeaderShownContext.Provider\n          value={isParentHeaderShown || headerShown !== false}\n        >\n          <HeaderHeightContext.Provider\n            value={headerShown ? headerHeight : parentHeaderHeight ?? 0}\n          >\n            {children}\n          </HeaderHeightContext.Provider>\n        </HeaderShownContext.Provider>\n      </View>\n      {headerShown ? (\n        <NavigationContext.Provider value={navigation}>\n          <NavigationRouteContext.Provider value={route}>\n            <View\n              onLayout={(e) => {\n                const { height } = e.nativeEvent.layout;\n\n                setHeaderHeight(height);\n              }}\n              style={headerTransparent ? styles.absolute : null}\n            >\n              {header}\n            </View>\n          </NavigationRouteContext.Provider>\n        </NavigationContext.Provider>\n      ) : null}\n    </Background>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse',\n  },\n  // This is necessary to avoid applying 'column-reverse' to screen content\n  content: {\n    flex: 1,\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n});\n","import * as React from 'react';\n\nexport default React.createContext<((height: number) => void) | undefined>(\n  undefined\n);\n","import * as React from 'react';\n\nexport default React.createContext<number | undefined>(undefined);\n","import * as React from 'react';\nimport { StyleProp, StyleSheet, Text, TextStyle } from 'react-native';\n\ntype Props = {\n  color?: string;\n  size?: number;\n  style?: StyleProp<TextStyle>;\n};\n\nexport default function MissingIcon({ color, size, style }: Props) {\n  return <Text style={[styles.icon, { color, fontSize: size }, style]}>⏷</Text>;\n}\n\nconst styles = StyleSheet.create({\n  icon: {\n    backgroundColor: 'transparent',\n  },\n});\n","import {\n  getPathFromState,\n  NavigationHelpers,\n  NavigationHelpersContext,\n  NavigationProp,\n  ParamListBase,\n} from '@react-navigation/core';\nimport * as React from 'react';\n\nimport LinkingContext from './LinkingContext';\n\ntype NavigationObject =\n  | NavigationHelpers<ParamListBase>\n  | NavigationProp<ParamListBase>;\n\ntype MinimalState = {\n  index: number;\n  routes: { name: string; params?: object; state?: MinimalState }[];\n};\n\nconst getRootStateForNavigate = (\n  navigation: NavigationObject,\n  state: MinimalState\n): MinimalState => {\n  const parent = navigation.getParent();\n\n  if (parent) {\n    const parentState = parent.getState();\n\n    return getRootStateForNavigate(parent, {\n      index: 0,\n      routes: [\n        {\n          ...parentState.routes[parentState.index],\n          state: state,\n        },\n      ],\n    });\n  }\n\n  return state;\n};\n\n/**\n * Build destination link for a navigate action.\n * Useful for showing anchor tags on the web for buttons that perform navigation.\n */\nexport default function useLinkBuilder() {\n  const navigation = React.useContext(NavigationHelpersContext);\n  const linking = React.useContext(LinkingContext);\n\n  const buildLink = React.useCallback(\n    (name: string, params?: object) => {\n      const { options } = linking;\n\n      if (options?.enabled === false) {\n        return undefined;\n      }\n\n      const state = navigation\n        ? getRootStateForNavigate(navigation, {\n            index: 0,\n            routes: [{ name, params }],\n          })\n        : // If we couldn't find a navigation object in context, we're at root\n          // So we'll construct a basic state object to use\n          {\n            index: 0,\n            routes: [{ name, params }],\n          };\n\n      const path = options?.getPathFromState\n        ? options.getPathFromState(state, options?.config)\n        : getPathFromState(state, options?.config);\n\n      return path;\n    },\n    [linking, navigation]\n  );\n\n  return buildLink;\n}\n","import {\n  getPathFromState,\n  NavigationAction,\n  NavigationContainerRefContext,\n  NavigationHelpersContext,\n  NavigatorScreenParams,\n  ParamListBase,\n} from '@react-navigation/core';\nimport type { NavigationState, PartialState } from '@react-navigation/routers';\nimport * as React from 'react';\nimport { GestureResponderEvent, Platform } from 'react-native';\n\nimport LinkingContext from './LinkingContext';\nimport useLinkTo, { To } from './useLinkTo';\n\ntype Props<ParamList extends ReactNavigation.RootParamList> = {\n  to: To<ParamList>;\n  action?: NavigationAction;\n};\n\nconst getStateFromParams = (\n  params: NavigatorScreenParams<ParamListBase, NavigationState> | undefined\n): PartialState<NavigationState> | NavigationState | undefined => {\n  if (params?.state) {\n    return params.state;\n  }\n\n  if (params?.screen) {\n    return {\n      routes: [\n        {\n          name: params.screen,\n          params: params.params,\n          // @ts-expect-error\n          state: params.screen\n            ? getStateFromParams(\n                params.params as\n                  | NavigatorScreenParams<ParamListBase, NavigationState>\n                  | undefined\n              )\n            : undefined,\n        },\n      ],\n    };\n  }\n\n  return undefined;\n};\n\n/**\n * Hook to get props for an anchor tag so it can work with in page navigation.\n *\n * @param props.to Absolute path to screen (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n */\nexport default function useLinkProps<\n  ParamList extends ReactNavigation.RootParamList\n>({ to, action }: Props<ParamList>) {\n  const root = React.useContext(NavigationContainerRefContext);\n  const navigation = React.useContext(NavigationHelpersContext);\n  const { options } = React.useContext(LinkingContext);\n  const linkTo = useLinkTo<ParamList>();\n\n  const onPress = (\n    e?: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => {\n    let shouldHandle = false;\n\n    if (Platform.OS !== 'web' || !e) {\n      shouldHandle = e ? !e.defaultPrevented : true;\n    } else if (\n      !e.defaultPrevented && // onPress prevented default\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      (e.button == null || e.button === 0) && // ignore everything but left clicks\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      [undefined, null, '', 'self'].includes(e.currentTarget?.target) // let browser handle \"target=_blank\" etc.\n    ) {\n      e.preventDefault();\n      shouldHandle = true;\n    }\n\n    if (shouldHandle) {\n      if (action) {\n        if (navigation) {\n          navigation.dispatch(action);\n        } else if (root) {\n          root.dispatch(action);\n        } else {\n          throw new Error(\n            \"Couldn't find a navigation object. Is your component inside NavigationContainer?\"\n          );\n        }\n      } else {\n        linkTo(to);\n      }\n    }\n  };\n\n  const getPathFromStateHelper = options?.getPathFromState ?? getPathFromState;\n\n  const href =\n    typeof to === 'string'\n      ? to\n      : getPathFromStateHelper(\n          {\n            routes: [\n              {\n                name: to.screen,\n                // @ts-expect-error\n                params: to.params,\n                // @ts-expect-error\n                state: getStateFromParams(to.params),\n              },\n            ],\n          },\n          options?.config\n        );\n\n  return {\n    href,\n    accessibilityRole: 'link' as const,\n    onPress,\n  };\n}\n","import {\n  getActionFromState,\n  getStateFromPath,\n  NavigationContainerRefContext,\n} from '@react-navigation/core';\nimport * as React from 'react';\n\nimport LinkingContext from './LinkingContext';\n\nexport type To<\n  ParamList extends ReactNavigation.RootParamList = ReactNavigation.RootParamList,\n  RouteName extends keyof ParamList = keyof ParamList\n> =\n  | string\n  | (undefined extends ParamList[RouteName]\n      ? {\n          screen: Extract<RouteName, string>;\n          params?: ParamList[RouteName];\n        }\n      : {\n          screen: Extract<RouteName, string>;\n          params: ParamList[RouteName];\n        });\n\nexport default function useLinkTo<\n  ParamList extends ReactNavigation.RootParamList\n>() {\n  const navigation = React.useContext(NavigationContainerRefContext);\n  const linking = React.useContext(LinkingContext);\n\n  const linkTo = React.useCallback(\n    (to: To<ParamList>) => {\n      if (navigation === undefined) {\n        throw new Error(\n          \"Couldn't find a navigation object. Is your component inside NavigationContainer?\"\n        );\n      }\n\n      if (typeof to !== 'string') {\n        // @ts-expect-error: This is fine\n        navigation.navigate(to.screen, to.params);\n        return;\n      }\n\n      if (!to.startsWith('/')) {\n        throw new Error(`The path must start with '/' (${to}).`);\n      }\n\n      const { options } = linking;\n\n      const state = options?.getStateFromPath\n        ? options.getStateFromPath(to, options.config)\n        : getStateFromPath(to, options?.config);\n\n      if (state) {\n        const action = getActionFromState(state, options?.config);\n\n        if (action !== undefined) {\n          navigation.dispatch(action);\n        } else {\n          navigation.reset(state);\n        }\n      } else {\n        throw new Error('Failed to parse the path to a navigation state.');\n      }\n    },\n    [linking, navigation]\n  );\n\n  return linkTo;\n}\n","import type { NavigationAction } from '@react-navigation/core';\nimport * as React from 'react';\nimport { GestureResponderEvent, Platform, Text, TextProps } from 'react-native';\n\nimport useLinkProps from './useLinkProps';\nimport type { To } from './useLinkTo';\n\ntype Props<ParamList extends ReactNavigation.RootParamList> = {\n  to: To<ParamList>;\n  action?: NavigationAction;\n  target?: string;\n  onPress?: (\n    e: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => void;\n} & (TextProps & { children: React.ReactNode });\n\n/**\n * Component to render link to another screen using a path.\n * Uses an anchor tag on the web.\n *\n * @param props.to Absolute path to screen (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n * @param props.children Child elements to render the content.\n */\nexport default function Link<ParamList extends ReactNavigation.RootParamList>({\n  to,\n  action,\n  ...rest\n}: Props<ParamList>) {\n  const props = useLinkProps<ParamList>({ to, action });\n\n  const onPress = (\n    e: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => {\n    if ('onPress' in rest) {\n      rest.onPress?.(e);\n    }\n\n    props.onPress(e);\n  };\n\n  return React.createElement(Text, {\n    ...props,\n    ...rest,\n    ...Platform.select({\n      web: { onClick: onPress } as any,\n      default: { onPress },\n    }),\n  });\n}\n","import { useTheme } from '@react-navigation/native';\nimport color from 'color';\nimport * as React from 'react';\nimport { Animated, StyleProp, StyleSheet, TextStyle } from 'react-native';\n\ntype Props = {\n  /**\n   * Whether the badge is visible\n   */\n  visible: boolean;\n  /**\n   * Content of the `Badge`.\n   */\n  children?: string | number;\n  /**\n   * Size of the `Badge`.\n   */\n  size?: number;\n  /**\n   * Style object for the tab bar container.\n   */\n  style?: Animated.WithAnimatedValue<StyleProp<TextStyle>>;\n};\n\nexport default function Badge({\n  children,\n  style,\n  visible = true,\n  size = 18,\n  ...rest\n}: Props) {\n  const [opacity] = React.useState(() => new Animated.Value(visible ? 1 : 0));\n  const [rendered, setRendered] = React.useState(visible);\n\n  const theme = useTheme();\n\n  React.useEffect(() => {\n    if (!rendered) {\n      return;\n    }\n\n    Animated.timing(opacity, {\n      toValue: visible ? 1 : 0,\n      duration: 150,\n      useNativeDriver: true,\n    }).start(({ finished }) => {\n      if (finished && !visible) {\n        setRendered(false);\n      }\n    });\n\n    return () => opacity.stopAnimation();\n  }, [opacity, rendered, visible]);\n\n  if (!rendered) {\n    if (visible) {\n      setRendered(true);\n    } else {\n      return null;\n    }\n  }\n\n  // @ts-expect-error: backgroundColor definitely exists\n  const { backgroundColor = theme.colors.notification, ...restStyle } =\n    StyleSheet.flatten(style) || {};\n  const textColor = color(backgroundColor).isLight() ? 'black' : 'white';\n\n  const borderRadius = size / 2;\n  const fontSize = Math.floor((size * 3) / 4);\n\n  return (\n    <Animated.Text\n      numberOfLines={1}\n      style={[\n        {\n          transform: [\n            {\n              scale: opacity.interpolate({\n                inputRange: [0, 1],\n                outputRange: [0.5, 1],\n              }),\n            },\n          ],\n          color: textColor,\n          lineHeight: size - 1,\n          height: size,\n          minWidth: size,\n          opacity,\n          backgroundColor,\n          fontSize,\n          borderRadius,\n        },\n        styles.container,\n        restStyle,\n      ]}\n      {...rest}\n    >\n      {children}\n    </Animated.Text>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    alignSelf: 'flex-end',\n    textAlign: 'center',\n    paddingHorizontal: 4,\n    overflow: 'hidden',\n  },\n});\n","import type { Route } from '@react-navigation/native';\nimport React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport Badge from './Badge';\n\ntype Props = {\n  route: Route<string>;\n  horizontal: boolean;\n  badge?: string | number;\n  badgeStyle?: StyleProp<TextStyle>;\n  activeOpacity: number;\n  inactiveOpacity: number;\n  activeTintColor: string;\n  inactiveTintColor: string;\n  renderIcon: (props: {\n    focused: boolean;\n    color: string;\n    size: number;\n  }) => React.ReactNode;\n  style: StyleProp<ViewStyle>;\n};\n\nexport default function TabBarIcon({\n  route: _,\n  horizontal,\n  badge,\n  badgeStyle,\n  activeOpacity,\n  inactiveOpacity,\n  activeTintColor,\n  inactiveTintColor,\n  renderIcon,\n  style,\n}: Props) {\n  const size = 25;\n\n  // We render the icon twice at the same position on top of each other:\n  // active and inactive one, so we can fade between them.\n  return (\n    <View\n      style={[horizontal ? styles.iconHorizontal : styles.iconVertical, style]}\n    >\n      <View style={[styles.icon, { opacity: activeOpacity }]}>\n        {renderIcon({\n          focused: true,\n          size,\n          color: activeTintColor,\n        })}\n      </View>\n      <View style={[styles.icon, { opacity: inactiveOpacity }]}>\n        {renderIcon({\n          focused: false,\n          size,\n          color: inactiveTintColor,\n        })}\n      </View>\n      <Badge\n        visible={badge != null}\n        style={[\n          styles.badge,\n          horizontal ? styles.badgeHorizontal : styles.badgeVertical,\n          badgeStyle,\n        ]}\n        size={(size * 3) / 4}\n      >\n        {badge}\n      </Badge>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  icon: {\n    // We render the icon twice at the same position on top of each other:\n    // active and inactive one, so we can fade between them:\n    // Cover the whole iconContainer:\n    position: 'absolute',\n    alignSelf: 'center',\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: '100%',\n    width: '100%',\n    // Workaround for react-native >= 0.54 layout bug\n    minWidth: 25,\n  },\n  iconVertical: {\n    flex: 1,\n  },\n  iconHorizontal: {\n    height: '100%',\n    marginTop: 3,\n  },\n  badge: {\n    position: 'absolute',\n    left: 3,\n  },\n  badgeVertical: {\n    top: 3,\n  },\n  badgeHorizontal: {\n    top: 7,\n  },\n});\n","import { Link, Route, useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport React from 'react';\nimport {\n  GestureResponderEvent,\n  Platform,\n  Pressable,\n  StyleProp,\n  StyleSheet,\n  Text,\n  TextStyle,\n  ViewStyle,\n} from 'react-native';\n\nimport type { BottomTabBarButtonProps, LabelPosition } from '../types';\nimport TabBarIcon from './TabBarIcon';\n\ntype Props = {\n  /**\n   * Whether the tab is focused.\n   */\n  focused: boolean;\n  /**\n   * The route object which should be specified by the tab.\n   */\n  route: Route<string>;\n  /**\n   * The label text of the tab.\n   */\n  label:\n    | string\n    | ((props: {\n        focused: boolean;\n        color: string;\n        position: LabelPosition;\n      }) => React.ReactNode);\n  /**\n   * Icon to display for the tab.\n   */\n  icon: (props: {\n    focused: boolean;\n    size: number;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Text to show in a badge on the tab icon.\n   */\n  badge?: number | string;\n  /**\n   * Custom style for the badge.\n   */\n  badgeStyle?: StyleProp<TextStyle>;\n  /**\n   * URL to use for the link to the tab.\n   */\n  to?: string;\n  /**\n   * The button for the tab. Uses a `TouchableWithoutFeedback` by default.\n   */\n  button?: (props: BottomTabBarButtonProps) => React.ReactNode;\n  /**\n   * The accessibility label for the tab.\n   */\n  accessibilityLabel?: string;\n  /**\n   * An unique ID for testing for the tab.\n   */\n  testID?: string;\n  /**\n   * Function to execute on press in React Native.\n   * On the web, this will use onClick.\n   */\n  onPress: (\n    e: React.MouseEvent<HTMLElement, MouseEvent> | GestureResponderEvent\n  ) => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress: (e: GestureResponderEvent) => void;\n  /**\n   * Whether the label should be aligned with the icon horizontally.\n   */\n  horizontal: boolean;\n  /**\n   * Color for the icon and label when the item is active.\n   */\n  activeTintColor?: string;\n  /**\n   * Color for the icon and label when the item is inactive.\n   */\n  inactiveTintColor?: string;\n  /**\n   * Background color for item when its active.\n   */\n  activeBackgroundColor?: string;\n  /**\n   * Background color for item when its inactive.\n   */\n  inactiveBackgroundColor?: string;\n  /**\n   * Whether to show the label text for the tab.\n   */\n  showLabel?: boolean;\n  /**\n   * Whether to allow scaling the font for the label for accessibility purposes.\n   */\n  allowFontScaling?: boolean;\n  /**\n   * Style object for the label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * Style object for the icon element.\n   */\n  iconStyle?: StyleProp<ViewStyle>;\n  /**\n   * Style object for the wrapper element.\n   */\n  style?: StyleProp<ViewStyle>;\n};\n\nexport default function BottomTabBarItem({\n  focused,\n  route,\n  label,\n  icon,\n  badge,\n  badgeStyle,\n  to,\n  button = ({\n    children,\n    style,\n    onPress,\n    to,\n    accessibilityRole,\n    ...rest\n  }: BottomTabBarButtonProps) => {\n    if (Platform.OS === 'web' && to) {\n      // React Native Web doesn't forward `onClick` if we use `TouchableWithoutFeedback`.\n      // We need to use `onClick` to be able to prevent default browser handling of links.\n      return (\n        <Link\n          {...rest}\n          to={to}\n          style={[styles.button, style]}\n          onPress={(e: any) => {\n            if (\n              !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n              (e.button == null || e.button === 0) // ignore everything but left clicks\n            ) {\n              e.preventDefault();\n              onPress?.(e);\n            }\n          }}\n        >\n          {children}\n        </Link>\n      );\n    } else {\n      return (\n        <Pressable\n          {...rest}\n          accessibilityRole={accessibilityRole}\n          onPress={onPress}\n          style={style}\n        >\n          {children}\n        </Pressable>\n      );\n    }\n  },\n  accessibilityLabel,\n  testID,\n  onPress,\n  onLongPress,\n  horizontal,\n  activeTintColor: customActiveTintColor,\n  inactiveTintColor: customInactiveTintColor,\n  activeBackgroundColor = 'transparent',\n  inactiveBackgroundColor = 'transparent',\n  showLabel = true,\n  allowFontScaling,\n  labelStyle,\n  iconStyle,\n  style,\n}: Props) {\n  const { colors } = useTheme();\n\n  const activeTintColor =\n    customActiveTintColor === undefined\n      ? colors.primary\n      : customActiveTintColor;\n\n  const inactiveTintColor =\n    customInactiveTintColor === undefined\n      ? Color(colors.text).mix(Color(colors.card), 0.5).hex()\n      : customInactiveTintColor;\n\n  const renderLabel = ({ focused }: { focused: boolean }) => {\n    if (showLabel === false) {\n      return null;\n    }\n\n    const color = focused ? activeTintColor : inactiveTintColor;\n\n    if (typeof label === 'string') {\n      return (\n        <Text\n          numberOfLines={1}\n          style={[\n            styles.label,\n            { color },\n            horizontal ? styles.labelBeside : styles.labelBeneath,\n            labelStyle,\n          ]}\n          allowFontScaling={allowFontScaling}\n        >\n          {label}\n        </Text>\n      );\n    }\n\n    return label({\n      focused,\n      color,\n      position: horizontal ? 'beside-icon' : 'below-icon',\n    });\n  };\n\n  const renderIcon = ({ focused }: { focused: boolean }) => {\n    if (icon === undefined) {\n      return null;\n    }\n\n    const activeOpacity = focused ? 1 : 0;\n    const inactiveOpacity = focused ? 0 : 1;\n\n    return (\n      <TabBarIcon\n        route={route}\n        horizontal={horizontal}\n        badge={badge}\n        badgeStyle={badgeStyle}\n        activeOpacity={activeOpacity}\n        inactiveOpacity={inactiveOpacity}\n        activeTintColor={activeTintColor}\n        inactiveTintColor={inactiveTintColor}\n        renderIcon={icon}\n        style={iconStyle}\n      />\n    );\n  };\n\n  const scene = { route, focused };\n\n  const backgroundColor = focused\n    ? activeBackgroundColor\n    : inactiveBackgroundColor;\n\n  return button({\n    to,\n    onPress,\n    onLongPress,\n    testID,\n    accessibilityLabel,\n    // FIXME: accessibilityRole: 'tab' doesn't seem to work as expected on iOS\n    accessibilityRole: Platform.select({ ios: 'button', default: 'tab' }),\n    accessibilityState: { selected: focused },\n    // @ts-expect-error: keep for compatibility with older React Native versions\n    accessibilityStates: focused ? ['selected'] : [],\n    style: [\n      styles.tab,\n      { backgroundColor },\n      horizontal ? styles.tabLandscape : styles.tabPortrait,\n      style,\n    ],\n    children: (\n      <React.Fragment>\n        {renderIcon(scene)}\n        {renderLabel(scene)}\n      </React.Fragment>\n    ),\n  }) as React.ReactElement;\n}\n\nconst styles = StyleSheet.create({\n  tab: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  tabPortrait: {\n    justifyContent: 'flex-end',\n    flexDirection: 'column',\n  },\n  tabLandscape: {\n    justifyContent: 'center',\n    flexDirection: 'row',\n  },\n  label: {\n    textAlign: 'center',\n    backgroundColor: 'transparent',\n  },\n  labelBeneath: {\n    fontSize: 10,\n  },\n  labelBeside: {\n    fontSize: 13,\n    marginLeft: 20,\n    marginTop: 3,\n  },\n  button: {\n    display: 'flex',\n  },\n});\n","import { MissingIcon } from '@react-navigation/elements';\nimport {\n  CommonActions,\n  NavigationContext,\n  NavigationRouteContext,\n  ParamListBase,\n  TabNavigationState,\n  useLinkBuilder,\n  useTheme,\n} from '@react-navigation/native';\nimport React from 'react';\nimport {\n  Animated,\n  LayoutChangeEvent,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport { EdgeInsets, useSafeAreaFrame } from 'react-native-safe-area-context';\n\nimport type { BottomTabBarProps, BottomTabDescriptorMap } from '../types';\nimport BottomTabBarHeightCallbackContext from '../utils/BottomTabBarHeightCallbackContext';\nimport useIsKeyboardShown from '../utils/useIsKeyboardShown';\nimport BottomTabItem from './BottomTabItem';\n\ntype Props = BottomTabBarProps & {\n  style?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n};\n\nconst DEFAULT_TABBAR_HEIGHT = 49;\nconst COMPACT_TABBAR_HEIGHT = 32;\nconst DEFAULT_MAX_TAB_ITEM_WIDTH = 125;\n\nconst useNativeDriver = Platform.OS !== 'web';\n\ntype Options = {\n  state: TabNavigationState<ParamListBase>;\n  descriptors: BottomTabDescriptorMap;\n  layout: { height: number; width: number };\n  dimensions: { height: number; width: number };\n};\n\nconst shouldUseHorizontalLabels = ({\n  state,\n  descriptors,\n  layout,\n  dimensions,\n}: Options) => {\n  const { tabBarLabelPosition } =\n    descriptors[state.routes[state.index].key].options;\n\n  if (tabBarLabelPosition) {\n    switch (tabBarLabelPosition) {\n      case 'beside-icon':\n        return true;\n      case 'below-icon':\n        return false;\n    }\n  }\n\n  if (layout.width >= 768) {\n    // Screen size matches a tablet\n    const maxTabWidth = state.routes.reduce((acc, route) => {\n      const { tabBarItemStyle } = descriptors[route.key].options;\n      const flattenedStyle = StyleSheet.flatten(tabBarItemStyle);\n\n      if (flattenedStyle) {\n        if (typeof flattenedStyle.width === 'number') {\n          return acc + flattenedStyle.width;\n        } else if (typeof flattenedStyle.maxWidth === 'number') {\n          return acc + flattenedStyle.maxWidth;\n        }\n      }\n\n      return acc + DEFAULT_MAX_TAB_ITEM_WIDTH;\n    }, 0);\n\n    return maxTabWidth <= layout.width;\n  } else {\n    return dimensions.width > dimensions.height;\n  }\n};\n\nconst getPaddingBottom = (insets: EdgeInsets) =>\n  Math.max(insets.bottom - Platform.select({ ios: 4, default: 0 }), 0);\n\nexport const getTabBarHeight = ({\n  state,\n  descriptors,\n  dimensions,\n  insets,\n  style,\n  ...rest\n}: Options & {\n  insets: EdgeInsets;\n  style: Animated.WithAnimatedValue<StyleProp<ViewStyle>> | undefined;\n}) => {\n  // @ts-ignore\n  const customHeight = StyleSheet.flatten(style)?.height;\n\n  if (typeof customHeight === 'number') {\n    return customHeight;\n  }\n\n  const isLandscape = dimensions.width > dimensions.height;\n  const horizontalLabels = shouldUseHorizontalLabels({\n    state,\n    descriptors,\n    dimensions,\n    ...rest,\n  });\n  const paddingBottom = getPaddingBottom(insets);\n\n  if (\n    Platform.OS === 'ios' &&\n    !Platform.isPad &&\n    isLandscape &&\n    horizontalLabels\n  ) {\n    return COMPACT_TABBAR_HEIGHT + paddingBottom;\n  }\n\n  return DEFAULT_TABBAR_HEIGHT + paddingBottom;\n};\n\nexport default function BottomTabBar({\n  state,\n  navigation,\n  descriptors,\n  insets,\n  style,\n}: Props) {\n  const { colors } = useTheme();\n  const buildLink = useLinkBuilder();\n\n  const focusedRoute = state.routes[state.index];\n  const focusedDescriptor = descriptors[focusedRoute.key];\n  const focusedOptions = focusedDescriptor.options;\n\n  const {\n    tabBarShowLabel,\n    tabBarHideOnKeyboard = false,\n    tabBarVisibilityAnimationConfig,\n    tabBarStyle,\n    tabBarBackground,\n    tabBarActiveTintColor,\n    tabBarInactiveTintColor,\n    tabBarActiveBackgroundColor,\n    tabBarInactiveBackgroundColor,\n  } = focusedOptions;\n\n  const dimensions = useSafeAreaFrame();\n  const isKeyboardShown = useIsKeyboardShown();\n\n  const onHeightChange = React.useContext(BottomTabBarHeightCallbackContext);\n\n  const shouldShowTabBar = !(tabBarHideOnKeyboard && isKeyboardShown);\n\n  const visibilityAnimationConfigRef = React.useRef(\n    tabBarVisibilityAnimationConfig\n  );\n\n  React.useEffect(() => {\n    visibilityAnimationConfigRef.current = tabBarVisibilityAnimationConfig;\n  });\n\n  const [isTabBarHidden, setIsTabBarHidden] = React.useState(!shouldShowTabBar);\n\n  const [visible] = React.useState(\n    () => new Animated.Value(shouldShowTabBar ? 1 : 0)\n  );\n\n  React.useEffect(() => {\n    const visibilityAnimationConfig = visibilityAnimationConfigRef.current;\n\n    if (shouldShowTabBar) {\n      const animation =\n        visibilityAnimationConfig?.show?.animation === 'spring'\n          ? Animated.spring\n          : Animated.timing;\n\n      animation(visible, {\n        toValue: 1,\n        useNativeDriver,\n        duration: 250,\n        ...visibilityAnimationConfig?.show?.config,\n      }).start(({ finished }) => {\n        if (finished) {\n          setIsTabBarHidden(false);\n        }\n      });\n    } else {\n      setIsTabBarHidden(true);\n\n      const animation =\n        visibilityAnimationConfig?.hide?.animation === 'spring'\n          ? Animated.spring\n          : Animated.timing;\n\n      animation(visible, {\n        toValue: 0,\n        useNativeDriver,\n        duration: 200,\n        ...visibilityAnimationConfig?.hide?.config,\n      }).start();\n    }\n\n    return () => visible.stopAnimation();\n  }, [visible, shouldShowTabBar]);\n\n  const [layout, setLayout] = React.useState({\n    height: 0,\n    width: dimensions.width,\n  });\n\n  const handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    onHeightChange?.(height);\n\n    setLayout((layout) => {\n      if (height === layout.height && width === layout.width) {\n        return layout;\n      } else {\n        return {\n          height,\n          width,\n        };\n      }\n    });\n  };\n\n  const { routes } = state;\n\n  const paddingBottom = getPaddingBottom(insets);\n  const tabBarHeight = getTabBarHeight({\n    state,\n    descriptors,\n    insets,\n    dimensions,\n    layout,\n    style: [tabBarStyle, style],\n  });\n\n  const hasHorizontalLabels = shouldUseHorizontalLabels({\n    state,\n    descriptors,\n    dimensions,\n    layout,\n  });\n\n  const tabBarBackgroundElement = tabBarBackground?.();\n\n  return (\n    <Animated.View\n      style={[\n        styles.tabBar,\n        {\n          backgroundColor:\n            tabBarBackgroundElement != null ? 'transparent' : colors.card,\n          borderTopColor: colors.border,\n        },\n        {\n          transform: [\n            {\n              translateY: visible.interpolate({\n                inputRange: [0, 1],\n                outputRange: [\n                  layout.height + paddingBottom + StyleSheet.hairlineWidth,\n                  0,\n                ],\n              }),\n            },\n          ],\n          // Absolutely position the tab bar so that the content is below it\n          // This is needed to avoid gap at bottom when the tab bar is hidden\n          position: isTabBarHidden ? 'absolute' : (null as any),\n        },\n        {\n          height: tabBarHeight,\n          paddingBottom,\n          paddingHorizontal: Math.max(insets.left, insets.right),\n        },\n        tabBarStyle,\n      ]}\n      pointerEvents={isTabBarHidden ? 'none' : 'auto'}\n      onLayout={handleLayout}\n    >\n      <View pointerEvents=\"none\" style={StyleSheet.absoluteFill}>\n        {tabBarBackgroundElement}\n      </View>\n      <View accessibilityRole=\"tablist\" style={styles.content}>\n        {routes.map((route, index) => {\n          const focused = index === state.index;\n          const { options } = descriptors[route.key];\n\n          const onPress = () => {\n            const event = navigation.emit({\n              type: 'tabPress',\n              target: route.key,\n              canPreventDefault: true,\n            });\n\n            if (!focused && !event.defaultPrevented) {\n              navigation.dispatch({\n                ...CommonActions.navigate({ name: route.name, merge: true }),\n                target: state.key,\n              });\n            }\n          };\n\n          const onLongPress = () => {\n            navigation.emit({\n              type: 'tabLongPress',\n              target: route.key,\n            });\n          };\n\n          const label =\n            options.tabBarLabel !== undefined\n              ? options.tabBarLabel\n              : options.title !== undefined\n              ? options.title\n              : route.name;\n\n          const accessibilityLabel =\n            options.tabBarAccessibilityLabel !== undefined\n              ? options.tabBarAccessibilityLabel\n              : typeof label === 'string' && Platform.OS === 'ios'\n              ? `${label}, tab, ${index + 1} of ${routes.length}`\n              : undefined;\n\n          return (\n            <NavigationContext.Provider\n              key={route.key}\n              value={descriptors[route.key].navigation}\n            >\n              <NavigationRouteContext.Provider value={route}>\n                <BottomTabItem\n                  route={route}\n                  focused={focused}\n                  horizontal={hasHorizontalLabels}\n                  onPress={onPress}\n                  onLongPress={onLongPress}\n                  accessibilityLabel={accessibilityLabel}\n                  to={buildLink(route.name, route.params)}\n                  testID={options.tabBarTestID}\n                  allowFontScaling={options.tabBarAllowFontScaling}\n                  activeTintColor={tabBarActiveTintColor}\n                  inactiveTintColor={tabBarInactiveTintColor}\n                  activeBackgroundColor={tabBarActiveBackgroundColor}\n                  inactiveBackgroundColor={tabBarInactiveBackgroundColor}\n                  button={options.tabBarButton}\n                  icon={\n                    options.tabBarIcon ??\n                    (({ color, size }) => (\n                      <MissingIcon color={color} size={size} />\n                    ))\n                  }\n                  badge={options.tabBarBadge}\n                  badgeStyle={options.tabBarBadgeStyle}\n                  label={label}\n                  showLabel={tabBarShowLabel}\n                  labelStyle={options.tabBarLabelStyle}\n                  iconStyle={options.tabBarIconStyle}\n                  style={options.tabBarItemStyle}\n                />\n              </NavigationRouteContext.Provider>\n            </NavigationContext.Provider>\n          );\n        })}\n      </View>\n    </Animated.View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  tabBar: {\n    left: 0,\n    right: 0,\n    bottom: 0,\n    borderTopWidth: StyleSheet.hairlineWidth,\n    elevation: 8,\n  },\n  content: {\n    flex: 1,\n    flexDirection: 'row',\n  },\n});\n","import * as React from 'react';\nimport { EmitterSubscription, Keyboard, Platform } from 'react-native';\n\nexport default function useIsKeyboardShown() {\n  const [isKeyboardShown, setIsKeyboardShown] = React.useState(false);\n\n  React.useEffect(() => {\n    const handleKeyboardShow = () => setIsKeyboardShown(true);\n    const handleKeyboardHide = () => setIsKeyboardShown(false);\n\n    let subscriptions: EmitterSubscription[];\n\n    if (Platform.OS === 'ios') {\n      subscriptions = [\n        Keyboard.addListener('keyboardWillShow', handleKeyboardShow),\n        Keyboard.addListener('keyboardWillHide', handleKeyboardHide),\n      ];\n    } else {\n      subscriptions = [\n        Keyboard.addListener('keyboardDidShow', handleKeyboardShow),\n        Keyboard.addListener('keyboardDidHide', handleKeyboardHide),\n      ];\n    }\n\n    return () => {\n      subscriptions.forEach((s) => s.remove());\n    };\n  }, []);\n\n  return isKeyboardShown;\n}\n","import * as React from 'react';\nimport { Platform, StyleProp, StyleSheet, View, ViewStyle } from 'react-native';\n\ntype Props = {\n  visible: boolean;\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\nconst FAR_FAR_AWAY = 30000; // this should be big enough to move the whole view out of its container\n\nexport default function ResourceSavingScene({\n  visible,\n  children,\n  style,\n  ...rest\n}: Props) {\n  if (Platform.OS === 'web') {\n    return (\n      <View\n        // @ts-expect-error: hidden exists on web, but not in React Native\n        hidden={!visible}\n        style={[\n          { display: visible ? 'flex' : 'none' },\n          styles.container,\n          style,\n        ]}\n        pointerEvents={visible ? 'auto' : 'none'}\n        {...rest}\n      >\n        {children}\n      </View>\n    );\n  }\n\n  return (\n    <View\n      style={[styles.container, style]}\n      // box-none doesn't seem to work properly on Android\n      pointerEvents={visible ? 'auto' : 'none'}\n    >\n      <View\n        collapsable={false}\n        removeClippedSubviews={\n          // On iOS & macOS, set removeClippedSubviews to true only when not focused\n          // This is an workaround for a bug where the clipped view never re-appears\n          Platform.OS === 'ios' || Platform.OS === 'macos' ? !visible : true\n        }\n        pointerEvents={visible ? 'auto' : 'none'}\n        style={visible ? styles.attached : styles.detached}\n      >\n        {children}\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  attached: {\n    flex: 1,\n  },\n  detached: {\n    flex: 1,\n    top: FAR_FAR_AWAY,\n  },\n});\n","import { ResourceSavingView } from '@react-navigation/elements';\nimport * as React from 'react';\nimport { StyleProp, View, ViewProps, ViewStyle } from 'react-native';\n\ntype Props = {\n  visible: boolean;\n  children: React.ReactNode;\n  enabled: boolean;\n  style?: StyleProp<ViewStyle>;\n};\n\nlet Screens: typeof import('react-native-screens') | undefined;\n\ntry {\n  Screens = require('react-native-screens');\n} catch (e) {\n  // Ignore\n}\n\nexport const MaybeScreenContainer = ({\n  enabled,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  hasTwoStates: boolean;\n  children: React.ReactNode;\n}) => {\n  if (Screens?.screensEnabled?.()) {\n    return <Screens.ScreenContainer enabled={enabled} {...rest} />;\n  }\n\n  return <View {...rest} />;\n};\n\nexport function MaybeScreen({ visible, children, ...rest }: Props) {\n  if (Screens?.screensEnabled?.()) {\n    return (\n      <Screens.Screen activityState={visible ? 2 : 0} {...rest}>\n        {children}\n      </Screens.Screen>\n    );\n  }\n\n  return (\n    <ResourceSavingView visible={visible} {...rest}>\n      {children}\n    </ResourceSavingView>\n  );\n}\n","import {\n  getHeaderTitle,\n  Header,\n  SafeAreaProviderCompat,\n  Screen,\n} from '@react-navigation/elements';\nimport type {\n  ParamListBase,\n  TabNavigationState,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport { Platform, StyleSheet } from 'react-native';\nimport { SafeAreaInsetsContext } from 'react-native-safe-area-context';\n\nimport type {\n  BottomTabBarProps,\n  BottomTabDescriptorMap,\n  BottomTabHeaderProps,\n  BottomTabNavigationConfig,\n  BottomTabNavigationHelpers,\n  BottomTabNavigationProp,\n} from '../types';\nimport BottomTabBarHeightCallbackContext from '../utils/BottomTabBarHeightCallbackContext';\nimport BottomTabBarHeightContext from '../utils/BottomTabBarHeightContext';\nimport BottomTabBar, { getTabBarHeight } from './BottomTabBar';\nimport { MaybeScreen, MaybeScreenContainer } from './ScreenFallback';\n\ntype Props = BottomTabNavigationConfig & {\n  state: TabNavigationState<ParamListBase>;\n  navigation: BottomTabNavigationHelpers;\n  descriptors: BottomTabDescriptorMap;\n};\n\nexport default function BottomTabView(props: Props) {\n  const {\n    tabBar = (props: BottomTabBarProps) => <BottomTabBar {...props} />,\n    state,\n    navigation,\n    descriptors,\n    safeAreaInsets,\n    detachInactiveScreens = Platform.OS === 'web' ||\n      Platform.OS === 'android' ||\n      Platform.OS === 'ios',\n    sceneContainerStyle,\n  } = props;\n\n  const focusedRouteKey = state.routes[state.index].key;\n  const [loaded, setLoaded] = React.useState([focusedRouteKey]);\n\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([...loaded, focusedRouteKey]);\n  }\n\n  const dimensions = SafeAreaProviderCompat.initialMetrics.frame;\n  const [tabBarHeight, setTabBarHeight] = React.useState(() =>\n    getTabBarHeight({\n      state,\n      descriptors,\n      dimensions,\n      layout: { width: dimensions.width, height: 0 },\n      insets: {\n        ...SafeAreaProviderCompat.initialMetrics.insets,\n        ...props.safeAreaInsets,\n      },\n      style: descriptors[state.routes[state.index].key].options.tabBarStyle,\n    })\n  );\n\n  const renderTabBar = () => {\n    return (\n      <SafeAreaInsetsContext.Consumer>\n        {(insets) =>\n          tabBar({\n            state: state,\n            descriptors: descriptors,\n            navigation: navigation,\n            insets: {\n              top: safeAreaInsets?.top ?? insets?.top ?? 0,\n              right: safeAreaInsets?.right ?? insets?.right ?? 0,\n              bottom: safeAreaInsets?.bottom ?? insets?.bottom ?? 0,\n              left: safeAreaInsets?.left ?? insets?.left ?? 0,\n            },\n          })\n        }\n      </SafeAreaInsetsContext.Consumer>\n    );\n  };\n\n  const { routes } = state;\n\n  return (\n    <SafeAreaProviderCompat>\n      <MaybeScreenContainer\n        enabled={detachInactiveScreens}\n        hasTwoStates\n        style={styles.container}\n      >\n        {routes.map((route, index) => {\n          const descriptor = descriptors[route.key];\n          const { lazy = true, unmountOnBlur } = descriptor.options;\n          const isFocused = state.index === index;\n\n          if (unmountOnBlur && !isFocused) {\n            return null;\n          }\n\n          if (lazy && !loaded.includes(route.key) && !isFocused) {\n            // Don't render a lazy screen if we've never navigated to it\n            return null;\n          }\n\n          const {\n            header = ({ layout, options }: BottomTabHeaderProps) => (\n              <Header\n                {...options}\n                layout={layout}\n                title={getHeaderTitle(options, route.name)}\n              />\n            ),\n          } = descriptor.options;\n\n          return (\n            <MaybeScreen\n              key={route.key}\n              style={[StyleSheet.absoluteFill, { zIndex: isFocused ? 0 : -1 }]}\n              visible={isFocused}\n              enabled={detachInactiveScreens}\n            >\n              <BottomTabBarHeightContext.Provider value={tabBarHeight}>\n                <Screen\n                  focused={isFocused}\n                  route={descriptor.route}\n                  navigation={descriptor.navigation}\n                  headerShown={descriptor.options.headerShown}\n                  headerTransparent={descriptor.options.headerTransparent}\n                  headerStatusBarHeight={\n                    descriptor.options.headerStatusBarHeight\n                  }\n                  header={header({\n                    layout: dimensions,\n                    route: descriptor.route,\n                    navigation:\n                      descriptor.navigation as BottomTabNavigationProp<ParamListBase>,\n                    options: descriptor.options,\n                  })}\n                  style={sceneContainerStyle}\n                >\n                  {descriptor.render()}\n                </Screen>\n              </BottomTabBarHeightContext.Provider>\n            </MaybeScreen>\n          );\n        })}\n      </MaybeScreenContainer>\n      <BottomTabBarHeightCallbackContext.Provider value={setTabBarHeight}>\n        {renderTabBar()}\n      </BottomTabBarHeightCallbackContext.Provider>\n    </SafeAreaProviderCompat>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n});\n","import {\n  createNavigatorFactory,\n  DefaultNavigatorOptions,\n  ParamListBase,\n  TabActionHelpers,\n  TabNavigationState,\n  TabRouter,\n  TabRouterOptions,\n  useNavigationBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport warnOnce from 'warn-once';\n\nimport type {\n  BottomTabNavigationConfig,\n  BottomTabNavigationEventMap,\n  BottomTabNavigationOptions,\n} from '../types';\nimport BottomTabView from '../views/BottomTabView';\n\ntype Props = DefaultNavigatorOptions<\n  ParamListBase,\n  TabNavigationState<ParamListBase>,\n  BottomTabNavigationOptions,\n  BottomTabNavigationEventMap\n> &\n  TabRouterOptions &\n  BottomTabNavigationConfig;\n\nfunction BottomTabNavigator({\n  id,\n  initialRouteName,\n  backBehavior,\n  children,\n  screenListeners,\n  screenOptions,\n  sceneContainerStyle,\n  ...restWithDeprecated\n}: Props) {\n  const {\n    // @ts-expect-error: lazy is deprecated\n    lazy,\n    // @ts-expect-error: tabBarOptions is deprecated\n    tabBarOptions,\n    ...rest\n  } = restWithDeprecated;\n\n  let defaultScreenOptions: BottomTabNavigationOptions = {};\n\n  if (tabBarOptions) {\n    Object.assign(defaultScreenOptions, {\n      tabBarHideOnKeyboard: tabBarOptions.keyboardHidesTabBar,\n      tabBarActiveTintColor: tabBarOptions.activeTintColor,\n      tabBarInactiveTintColor: tabBarOptions.inactiveTintColor,\n      tabBarActiveBackgroundColor: tabBarOptions.activeBackgroundColor,\n      tabBarInactiveBackgroundColor: tabBarOptions.inactiveBackgroundColor,\n      tabBarAllowFontScaling: tabBarOptions.allowFontScaling,\n      tabBarShowLabel: tabBarOptions.showLabel,\n      tabBarLabelStyle: tabBarOptions.labelStyle,\n      tabBarIconStyle: tabBarOptions.iconStyle,\n      tabBarItemStyle: tabBarOptions.tabStyle,\n      tabBarLabelPosition:\n        tabBarOptions.labelPosition ??\n        (tabBarOptions.adaptive === false ? 'below-icon' : undefined),\n      tabBarStyle: [\n        { display: tabBarOptions.tabBarVisible ? 'none' : 'flex' },\n        defaultScreenOptions.tabBarStyle,\n      ],\n    });\n\n    (\n      Object.keys(defaultScreenOptions) as (keyof BottomTabNavigationOptions)[]\n    ).forEach((key) => {\n      if (defaultScreenOptions[key] === undefined) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete defaultScreenOptions[key];\n      }\n    });\n\n    warnOnce(\n      tabBarOptions,\n      `Bottom Tab Navigator: 'tabBarOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n${JSON.stringify(\n        defaultScreenOptions,\n        null,\n        2\n      )}\\n\\nSee https://reactnavigation.org/docs/bottom-tab-navigator#options for more details.`\n    );\n  }\n\n  if (typeof lazy === 'boolean') {\n    defaultScreenOptions.lazy = lazy;\n\n    warnOnce(\n      true,\n      `Bottom Tab Navigator: 'lazy' in props is deprecated. Move it to 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/bottom-tab-navigator/#lazy for more details.`\n    );\n  }\n\n  const { state, descriptors, navigation, NavigationContent } =\n    useNavigationBuilder<\n      TabNavigationState<ParamListBase>,\n      TabRouterOptions,\n      TabActionHelpers<ParamListBase>,\n      BottomTabNavigationOptions,\n      BottomTabNavigationEventMap\n    >(TabRouter, {\n      id,\n      initialRouteName,\n      backBehavior,\n      children,\n      screenListeners,\n      screenOptions,\n      defaultScreenOptions,\n    });\n\n  return (\n    <NavigationContent>\n      <BottomTabView\n        {...rest}\n        state={state}\n        navigation={navigation}\n        descriptors={descriptors}\n        sceneContainerStyle={sceneContainerStyle}\n      />\n    </NavigationContent>\n  );\n}\n\nexport default createNavigatorFactory<\n  TabNavigationState<ParamListBase>,\n  BottomTabNavigationOptions,\n  BottomTabNavigationEventMap,\n  typeof BottomTabNavigator\n>(BottomTabNavigator);\n"],"names":["Screen","props","dimensions","useSafeAreaFrame","insets","useSafeAreaInsets","isParentHeaderShown","React","HeaderShownContext","parentHeaderHeight","HeaderHeightContext","focused","modal","header","headerShown","headerTransparent","headerStatusBarHeight","top","navigation","route","children","style","getDefaultHeaderHeight","headerHeight","setHeaderHeight","Background","accessibilityElementsHidden","importantForAccessibility","styles","container","View","content","value","NavigationContext","NavigationRouteContext","onLayout","e","height","nativeEvent","layout","absolute","StyleSheet","flex","flexDirection","position","left","right","undefined","MissingIcon","color","size","Text","icon","fontSize","backgroundColor","getRootStateForNavigate","state","parent","getParent","parentState","getState","index","routes","useLinkBuilder","NavigationHelpersContext","linking","LinkingContext","name","params","options","enabled","getPathFromState","config","getStateFromParams","screen","useLinkProps","to","action","root","NavigationContainerRefContext","linkTo","Error","startsWith","getStateFromPath","getActionFromState","dispatch","reset","navigate","useLinkTo","getPathFromStateHelper","href","accessibilityRole","onPress","shouldHandle","Platform","defaultPrevented","metaKey","altKey","ctrlKey","shiftKey","button","includes","currentTarget","_e$currentTarget","target","preventDefault","Link","rest","web","onClick","default","Badge","visible","Animated","opacity","rendered","setRendered","theme","useTheme","toValue","duration","useNativeDriver","start","finished","stopAnimation","colors","notification","restStyle","textColor","isLight","borderRadius","Math","floor","numberOfLines","transform","scale","interpolate","inputRange","outputRange","lineHeight","minWidth","alignSelf","textAlign","paddingHorizontal","overflow","TabBarIcon","horizontal","badge","badgeStyle","activeOpacity","inactiveOpacity","activeTintColor","inactiveTintColor","renderIcon","iconHorizontal","iconVertical","badgeHorizontal","badgeVertical","alignItems","justifyContent","width","marginTop","BottomTabBarItem","label","Pressable","accessibilityLabel","testID","onLongPress","customActiveTintColor","customInactiveTintColor","activeBackgroundColor","inactiveBackgroundColor","showLabel","allowFontScaling","labelStyle","iconStyle","primary","Color","text","mix","card","hex","scene","ios","accessibilityState","selected","accessibilityStates","tab","tabLandscape","tabPortrait","labelBeside","labelBeneath","renderLabel","marginLeft","display","shouldUseHorizontalLabels","descriptors","tabBarLabelPosition","key","reduce","acc","tabBarItemStyle","flattenedStyle","maxWidth","getPaddingBottom","max","bottom","getTabBarHeight","customHeight","_StyleSheet$flatten","isLandscape","horizontalLabels","paddingBottom","BottomTabBar","buildLink","focusedRoute","focusedOptions","tabBarShowLabel","tabBarHideOnKeyboard","tabBarVisibilityAnimationConfig","tabBarStyle","tabBarBackground","tabBarActiveTintColor","tabBarInactiveTintColor","tabBarActiveBackgroundColor","tabBarInactiveBackgroundColor","isKeyboardShown","setIsKeyboardShown","subscriptions","handleKeyboardShow","handleKeyboardHide","Keyboard","forEach","s","remove","useIsKeyboardShown","onHeightChange","BottomTabBarHeightCallbackContext","shouldShowTabBar","visibilityAnimationConfigRef","current","isTabBarHidden","setIsTabBarHidden","visibilityAnimationConfig","show","animation","_visibilityAnimationC2","hide","_visibilityAnimationC4","setLayout","tabBarHeight","hasHorizontalLabels","tabBarBackgroundElement","tabBar","borderTopColor","border","translateY","pointerEvents","map","tabBarLabel","title","tabBarAccessibilityLabel","length","BottomTabItem","event","emit","type","canPreventDefault","CommonActions","merge","tabBarTestID","tabBarAllowFontScaling","tabBarButton","tabBarIcon","tabBarBadge","tabBarBadgeStyle","tabBarLabelStyle","tabBarIconStyle","borderTopWidth","elevation","ResourceSavingScene","hidden","collapsable","removeClippedSubviews","attached","detached","Screens","require","MaybeScreenContainer","_Screens","screensEnabled","_Screens$screensEnabl","ScreenContainer","MaybeScreen","_Screens2","_Screens2$screensEnab","activityState","ResourceSavingView","BottomTabView","safeAreaInsets","detachInactiveScreens","sceneContainerStyle","focusedRouteKey","loaded","setLoaded","SafeAreaProviderCompat","setTabBarHeight","hasTwoStates","descriptor","lazy","unmountOnBlur","isFocused","Header","getHeaderTitle","zIndex","BottomTabBarHeightContext","Provider","render","SafeAreaInsetsContext","createNavigatorFactory","id","initialRouteName","backBehavior","screenListeners","screenOptions","restWithDeprecated","tabBarOptions","defaultScreenOptions","Object","assign","keyboardHidesTabBar","tabStyle","labelPosition","adaptive","tabBarVisible","keys","warnOnce","JSON","stringify","useNavigationBuilder","TabRouter","NavigationContent"],"sourceRoot":""}