{"version":3,"sources":["../Screen.tsx","../BottomTabBarHeightCallbackContext.tsx","../BottomTabBarHeightContext.tsx","../MissingIcon.tsx","../useLinkBuilder.tsx","../useLinkProps.tsx","../useLinkTo.tsx","../Link.tsx","../Badge.tsx","../TabBarIcon.tsx","../BottomTabItem.tsx","../BottomTabBar.tsx","../useIsKeyboardShown.tsx","../ResourceSavingView.tsx","../ScreenFallback.tsx","../BottomTabView.tsx","../createBottomTabNavigator.tsx"],"names":["Screen","props","dimensions","useSafeAreaFrame","insets","useSafeAreaInsets","isParentHeaderShown","React","parentHeaderHeight","modal","headerShown","headerStatusBarHeight","style","getDefaultHeaderHeight","accessibilityElementsHidden","importantForAccessibility","focused","styles","content","HeaderShownContext","value","HeaderHeightContext","headerHeight","navigation","route","onLayout","e","height","setHeaderHeight","headerTransparent","StyleSheet","container","flex","flexDirection","absolute","position","top","left","right","MissingIcon","color","fontSize","size","icon","backgroundColor","getRootStateForNavigate","parent","parentState","index","routes","state","useLinkBuilder","linking","options","name","params","getPathFromState","getStateFromParams","undefined","useLinkProps","action","root","linkTo","to","Error","getStateFromPath","getActionFromState","useLinkTo","getPathFromStateHelper","href","accessibilityRole","onPress","shouldHandle","Platform","Link","rest","web","onClick","default","Badge","visible","Animated","theme","useTheme","toValue","duration","useNativeDriver","finished","setRendered","opacity","rendered","restStyle","textColor","borderRadius","Math","numberOfLines","transform","scale","inputRange","outputRange","lineHeight","minWidth","alignSelf","textAlign","paddingHorizontal","overflow","TabBarIcon","horizontal","activeOpacity","renderIcon","activeTintColor","inactiveOpacity","inactiveTintColor","badge","alignItems","justifyContent","width","iconVertical","iconHorizontal","marginTop","badgeVertical","badgeHorizontal","BottomTabBarItem","button","activeBackgroundColor","inactiveBackgroundColor","showLabel","colors","customActiveTintColor","customInactiveTintColor","Color","scene","onLongPress","testID","accessibilityLabel","ios","accessibilityState","selected","accessibilityStates","children","badgeStyle","iconStyle","label","allowFontScaling","renderLabel","tab","tabPortrait","tabLandscape","labelBeneath","labelBeside","marginLeft","display","shouldUseHorizontalLabels","tabBarLabelPosition","descriptors","layout","tabBarItemStyle","flattenedStyle","acc","getPaddingBottom","getTabBarHeight","customHeight","isLandscape","horizontalLabels","paddingBottom","BottomTabBar","buildLink","focusedRoute","focusedOptions","tabBarHideOnKeyboard","tabBarInactiveBackgroundColor","isKeyboardShown","handleKeyboardShow","setIsKeyboardShown","handleKeyboardHide","subscriptions","Keyboard","s","useIsKeyboardShown","onHeightChange","shouldShowTabBar","visibilityAnimationConfigRef","visibilityAnimationConfig","animation","setIsTabBarHidden","tabBarHeight","tabBarStyle","hasHorizontalLabels","tabBarBackgroundElement","tabBarBackground","borderTopColor","border","translateY","isTabBarHidden","pointerEvents","setLayout","absoluteFill","key","event","type","target","canPreventDefault","merge","labelStyle","tabBar","bottom","borderTopWidth","elevation","ResourceSavingScene","hidden","collapsable","removeClippedSubviews","detached","attached","Screens","require","MaybeScreenContainer","enabled","MaybeScreen","activityState","BottomTabView","detachInactiveScreens","sceneContainerStyle","focusedRouteKey","loaded","setLoaded","SafeAreaProviderCompat","safeAreaInsets","descriptor","lazy","unmountOnBlur","isFocused","header","title","getHeaderTitle","zIndex","BottomTabBarHeightContext","BottomTabBarHeightCallbackContext","setTabBarHeight","createNavigatorFactory","restWithDeprecated","defaultScreenOptions","Object","tabBarOptions","tabBarActiveTintColor","tabBarInactiveTintColor","tabBarActiveBackgroundColor","tabBarAllowFontScaling","tabBarShowLabel","tabBarLabelStyle","tabBarIconStyle","warnOnce","JSON","useNavigationBuilder","initialRouteName","backBehavior","screenListeners","screenOptions","NavigationContent"],"mappings":"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","file":"static/js/1.342b93b1.chunk.js","sourcesContent":["import {\n  NavigationContext,\n  NavigationProp,\n  NavigationRouteContext,\n  ParamListBase,\n  RouteProp,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport { StyleProp, StyleSheet, View, ViewStyle } from 'react-native';\nimport {\n  useSafeAreaFrame,\n  useSafeAreaInsets,\n} from 'react-native-safe-area-context';\n\nimport Background from './Background';\nimport getDefaultHeaderHeight from './Header/getDefaultHeaderHeight';\nimport HeaderHeightContext from './Header/HeaderHeightContext';\nimport HeaderShownContext from './Header/HeaderShownContext';\n\ntype Props = {\n  focused: boolean;\n  modal?: boolean;\n  navigation: NavigationProp<ParamListBase>;\n  route: RouteProp<ParamListBase>;\n  header: React.ReactNode;\n  headerShown?: boolean;\n  headerStatusBarHeight?: number;\n  headerTransparent?: boolean;\n  style?: StyleProp<ViewStyle>;\n  children: React.ReactNode;\n};\n\nexport default function Screen(props: Props) {\n  const dimensions = useSafeAreaFrame();\n  const insets = useSafeAreaInsets();\n\n  const isParentHeaderShown = React.useContext(HeaderShownContext);\n  const parentHeaderHeight = React.useContext(HeaderHeightContext);\n\n  const {\n    focused,\n    modal = false,\n    header,\n    headerShown = true,\n    headerTransparent,\n    headerStatusBarHeight = isParentHeaderShown ? 0 : insets.top,\n    navigation,\n    route,\n    children,\n    style,\n  } = props;\n\n  const [headerHeight, setHeaderHeight] = React.useState(() =>\n    getDefaultHeaderHeight(dimensions, modal, headerStatusBarHeight)\n  );\n\n  return (\n    <Background\n      accessibilityElementsHidden={!focused}\n      importantForAccessibility={focused ? 'auto' : 'no-hide-descendants'}\n      style={[styles.container, style]}\n    >\n      <View style={styles.content}>\n        <HeaderShownContext.Provider\n          value={isParentHeaderShown || headerShown !== false}\n        >\n          <HeaderHeightContext.Provider\n            value={headerShown ? headerHeight : parentHeaderHeight ?? 0}\n          >\n            {children}\n          </HeaderHeightContext.Provider>\n        </HeaderShownContext.Provider>\n      </View>\n      {headerShown ? (\n        <NavigationContext.Provider value={navigation}>\n          <NavigationRouteContext.Provider value={route}>\n            <View\n              onLayout={(e) => {\n                const { height } = e.nativeEvent.layout;\n\n                setHeaderHeight(height);\n              }}\n              style={headerTransparent ? styles.absolute : null}\n            >\n              {header}\n            </View>\n          </NavigationRouteContext.Provider>\n        </NavigationContext.Provider>\n      ) : null}\n    </Background>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse',\n  },\n  // This is necessary to avoid applying 'column-reverse' to screen content\n  content: {\n    flex: 1,\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n});\n","import * as React from 'react';\n\nexport default React.createContext<((height: number) => void) | undefined>(\n  undefined\n);\n","import * as React from 'react';\n\nexport default React.createContext<number | undefined>(undefined);\n","import * as React from 'react';\nimport { StyleProp, StyleSheet, Text, TextStyle } from 'react-native';\n\ntype Props = {\n  color?: string;\n  size?: number;\n  style?: StyleProp<TextStyle>;\n};\n\nexport default function MissingIcon({ color, size, style }: Props) {\n  return <Text style={[styles.icon, { color, fontSize: size }, style]}>⏷</Text>;\n}\n\nconst styles = StyleSheet.create({\n  icon: {\n    backgroundColor: 'transparent',\n  },\n});\n","import {\n  getPathFromState,\n  NavigationHelpers,\n  NavigationHelpersContext,\n  NavigationProp,\n  ParamListBase,\n} from '@react-navigation/core';\nimport * as React from 'react';\n\nimport LinkingContext from './LinkingContext';\n\ntype NavigationObject =\n  | NavigationHelpers<ParamListBase>\n  | NavigationProp<ParamListBase>;\n\ntype MinimalState = {\n  index: number;\n  routes: { name: string; params?: object; state?: MinimalState }[];\n};\n\nconst getRootStateForNavigate = (\n  navigation: NavigationObject,\n  state: MinimalState\n): MinimalState => {\n  const parent = navigation.getParent();\n\n  if (parent) {\n    const parentState = parent.getState();\n\n    return getRootStateForNavigate(parent, {\n      index: 0,\n      routes: [\n        {\n          ...parentState.routes[parentState.index],\n          state: state,\n        },\n      ],\n    });\n  }\n\n  return state;\n};\n\n/**\n * Build destination link for a navigate action.\n * Useful for showing anchor tags on the web for buttons that perform navigation.\n */\nexport default function useLinkBuilder() {\n  const navigation = React.useContext(NavigationHelpersContext);\n  const linking = React.useContext(LinkingContext);\n\n  const buildLink = React.useCallback(\n    (name: string, params?: object) => {\n      const { options } = linking;\n\n      if (options?.enabled === false) {\n        return undefined;\n      }\n\n      const state = navigation\n        ? getRootStateForNavigate(navigation, {\n            index: 0,\n            routes: [{ name, params }],\n          })\n        : // If we couldn't find a navigation object in context, we're at root\n          // So we'll construct a basic state object to use\n          {\n            index: 0,\n            routes: [{ name, params }],\n          };\n\n      const path = options?.getPathFromState\n        ? options.getPathFromState(state, options?.config)\n        : getPathFromState(state, options?.config);\n\n      return path;\n    },\n    [linking, navigation]\n  );\n\n  return buildLink;\n}\n","import {\n  getPathFromState,\n  NavigationAction,\n  NavigationContainerRefContext,\n  NavigationHelpersContext,\n  NavigatorScreenParams,\n  ParamListBase,\n} from '@react-navigation/core';\nimport type { NavigationState, PartialState } from '@react-navigation/routers';\nimport * as React from 'react';\nimport { GestureResponderEvent, Platform } from 'react-native';\n\nimport LinkingContext from './LinkingContext';\nimport useLinkTo, { To } from './useLinkTo';\n\ntype Props<ParamList extends ReactNavigation.RootParamList> = {\n  to: To<ParamList>;\n  action?: NavigationAction;\n};\n\nconst getStateFromParams = (\n  params: NavigatorScreenParams<ParamListBase, NavigationState> | undefined\n): PartialState<NavigationState> | NavigationState | undefined => {\n  if (params?.state) {\n    return params.state;\n  }\n\n  if (params?.screen) {\n    return {\n      routes: [\n        {\n          name: params.screen,\n          params: params.params,\n          // @ts-expect-error\n          state: params.screen\n            ? getStateFromParams(\n                params.params as\n                  | NavigatorScreenParams<ParamListBase, NavigationState>\n                  | undefined\n              )\n            : undefined,\n        },\n      ],\n    };\n  }\n\n  return undefined;\n};\n\n/**\n * Hook to get props for an anchor tag so it can work with in page navigation.\n *\n * @param props.to Absolute path to screen (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n */\nexport default function useLinkProps<\n  ParamList extends ReactNavigation.RootParamList\n>({ to, action }: Props<ParamList>) {\n  const root = React.useContext(NavigationContainerRefContext);\n  const navigation = React.useContext(NavigationHelpersContext);\n  const { options } = React.useContext(LinkingContext);\n  const linkTo = useLinkTo<ParamList>();\n\n  const onPress = (\n    e?: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => {\n    let shouldHandle = false;\n\n    if (Platform.OS !== 'web' || !e) {\n      shouldHandle = e ? !e.defaultPrevented : true;\n    } else if (\n      !e.defaultPrevented && // onPress prevented default\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      (e.button == null || e.button === 0) && // ignore everything but left clicks\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      [undefined, null, '', 'self'].includes(e.currentTarget?.target) // let browser handle \"target=_blank\" etc.\n    ) {\n      e.preventDefault();\n      shouldHandle = true;\n    }\n\n    if (shouldHandle) {\n      if (action) {\n        if (navigation) {\n          navigation.dispatch(action);\n        } else if (root) {\n          root.dispatch(action);\n        } else {\n          throw new Error(\n            \"Couldn't find a navigation object. Is your component inside NavigationContainer?\"\n          );\n        }\n      } else {\n        linkTo(to);\n      }\n    }\n  };\n\n  const getPathFromStateHelper = options?.getPathFromState ?? getPathFromState;\n\n  const href =\n    typeof to === 'string'\n      ? to\n      : getPathFromStateHelper(\n          {\n            routes: [\n              {\n                name: to.screen,\n                // @ts-expect-error\n                params: to.params,\n                // @ts-expect-error\n                state: getStateFromParams(to.params),\n              },\n            ],\n          },\n          options?.config\n        );\n\n  return {\n    href,\n    accessibilityRole: 'link' as const,\n    onPress,\n  };\n}\n","import {\n  getActionFromState,\n  getStateFromPath,\n  NavigationContainerRefContext,\n} from '@react-navigation/core';\nimport * as React from 'react';\n\nimport LinkingContext from './LinkingContext';\n\nexport type To<\n  ParamList extends ReactNavigation.RootParamList = ReactNavigation.RootParamList,\n  RouteName extends keyof ParamList = keyof ParamList\n> =\n  | string\n  | (undefined extends ParamList[RouteName]\n      ? {\n          screen: Extract<RouteName, string>;\n          params?: ParamList[RouteName];\n        }\n      : {\n          screen: Extract<RouteName, string>;\n          params: ParamList[RouteName];\n        });\n\nexport default function useLinkTo<\n  ParamList extends ReactNavigation.RootParamList\n>() {\n  const navigation = React.useContext(NavigationContainerRefContext);\n  const linking = React.useContext(LinkingContext);\n\n  const linkTo = React.useCallback(\n    (to: To<ParamList>) => {\n      if (navigation === undefined) {\n        throw new Error(\n          \"Couldn't find a navigation object. Is your component inside NavigationContainer?\"\n        );\n      }\n\n      if (typeof to !== 'string') {\n        // @ts-expect-error: This is fine\n        navigation.navigate(to.screen, to.params);\n        return;\n      }\n\n      if (!to.startsWith('/')) {\n        throw new Error(`The path must start with '/' (${to}).`);\n      }\n\n      const { options } = linking;\n\n      const state = options?.getStateFromPath\n        ? options.getStateFromPath(to, options.config)\n        : getStateFromPath(to, options?.config);\n\n      if (state) {\n        const action = getActionFromState(state, options?.config);\n\n        if (action !== undefined) {\n          navigation.dispatch(action);\n        } else {\n          navigation.reset(state);\n        }\n      } else {\n        throw new Error('Failed to parse the path to a navigation state.');\n      }\n    },\n    [linking, navigation]\n  );\n\n  return linkTo;\n}\n","import type { NavigationAction } from '@react-navigation/core';\nimport * as React from 'react';\nimport { GestureResponderEvent, Platform, Text, TextProps } from 'react-native';\n\nimport useLinkProps from './useLinkProps';\nimport type { To } from './useLinkTo';\n\ntype Props<ParamList extends ReactNavigation.RootParamList> = {\n  to: To<ParamList>;\n  action?: NavigationAction;\n  target?: string;\n  onPress?: (\n    e: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => void;\n} & (TextProps & { children: React.ReactNode });\n\n/**\n * Component to render link to another screen using a path.\n * Uses an anchor tag on the web.\n *\n * @param props.to Absolute path to screen (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n * @param props.children Child elements to render the content.\n */\nexport default function Link<ParamList extends ReactNavigation.RootParamList>({\n  to,\n  action,\n  ...rest\n}: Props<ParamList>) {\n  const props = useLinkProps<ParamList>({ to, action });\n\n  const onPress = (\n    e: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => {\n    if ('onPress' in rest) {\n      rest.onPress?.(e);\n    }\n\n    props.onPress(e);\n  };\n\n  return React.createElement(Text, {\n    ...props,\n    ...rest,\n    ...Platform.select({\n      web: { onClick: onPress } as any,\n      default: { onPress },\n    }),\n  });\n}\n","import { useTheme } from '@react-navigation/native';\nimport color from 'color';\nimport * as React from 'react';\nimport { Animated, StyleProp, StyleSheet, TextStyle } from 'react-native';\n\ntype Props = {\n  /**\n   * Whether the badge is visible\n   */\n  visible: boolean;\n  /**\n   * Content of the `Badge`.\n   */\n  children?: string | number;\n  /**\n   * Size of the `Badge`.\n   */\n  size?: number;\n  /**\n   * Style object for the tab bar container.\n   */\n  style?: Animated.WithAnimatedValue<StyleProp<TextStyle>>;\n};\n\nexport default function Badge({\n  visible = true,\n  size = 18,\n  children,\n  style,\n  ...rest\n}: Props) {\n  const [opacity] = React.useState(() => new Animated.Value(visible ? 1 : 0));\n  const [rendered, setRendered] = React.useState(visible ? true : false);\n\n  const theme = useTheme();\n\n  React.useEffect(() => {\n    if (!rendered) {\n      return;\n    }\n\n    Animated.timing(opacity, {\n      toValue: visible ? 1 : 0,\n      duration: 150,\n      useNativeDriver: true,\n    }).start(({ finished }) => {\n      if (finished && !visible) {\n        setRendered(false);\n      }\n    });\n\n    return () => opacity.stopAnimation();\n  }, [opacity, rendered, visible]);\n\n  if (visible && !rendered) {\n    setRendered(true);\n  }\n\n  if (!visible && !rendered) {\n    return null;\n  }\n\n  // @ts-expect-error: backgroundColor definitely exists\n  const { backgroundColor = theme.colors.notification, ...restStyle } =\n    StyleSheet.flatten(style) || {};\n  const textColor = color(backgroundColor).isLight() ? 'black' : 'white';\n\n  const borderRadius = size / 2;\n  const fontSize = Math.floor((size * 3) / 4);\n\n  return (\n    <Animated.Text\n      numberOfLines={1}\n      style={[\n        {\n          opacity,\n          transform: [\n            {\n              scale: opacity.interpolate({\n                inputRange: [0, 1],\n                outputRange: [0.5, 1],\n              }),\n            },\n          ],\n          backgroundColor,\n          color: textColor,\n          fontSize,\n          lineHeight: size - 1,\n          height: size,\n          minWidth: size,\n          borderRadius,\n        },\n        styles.container,\n        restStyle,\n      ]}\n      {...rest}\n    >\n      {children}\n    </Animated.Text>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    alignSelf: 'flex-end',\n    textAlign: 'center',\n    paddingHorizontal: 4,\n    overflow: 'hidden',\n  },\n});\n","import type { Route } from '@react-navigation/native';\nimport React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport Badge from './Badge';\n\ntype Props = {\n  route: Route<string>;\n  horizontal: boolean;\n  badge?: string | number;\n  badgeStyle?: StyleProp<TextStyle>;\n  activeOpacity: number;\n  inactiveOpacity: number;\n  activeTintColor: string;\n  inactiveTintColor: string;\n  renderIcon: (props: {\n    focused: boolean;\n    color: string;\n    size: number;\n  }) => React.ReactNode;\n  style: StyleProp<ViewStyle>;\n};\n\nexport default function TabBarIcon({\n  route: _,\n  horizontal,\n  badge,\n  badgeStyle,\n  activeOpacity,\n  inactiveOpacity,\n  activeTintColor,\n  inactiveTintColor,\n  renderIcon,\n  style,\n}: Props) {\n  const size = 25;\n\n  // We render the icon twice at the same position on top of each other:\n  // active and inactive one, so we can fade between them.\n  return (\n    <View\n      style={[horizontal ? styles.iconHorizontal : styles.iconVertical, style]}\n    >\n      <View style={[styles.icon, { opacity: activeOpacity }]}>\n        {renderIcon({\n          focused: true,\n          size,\n          color: activeTintColor,\n        })}\n      </View>\n      <View style={[styles.icon, { opacity: inactiveOpacity }]}>\n        {renderIcon({\n          focused: false,\n          size,\n          color: inactiveTintColor,\n        })}\n      </View>\n      <Badge\n        visible={badge != null}\n        style={[\n          styles.badge,\n          horizontal ? styles.badgeHorizontal : styles.badgeVertical,\n          badgeStyle,\n        ]}\n        size={(size * 3) / 4}\n      >\n        {badge}\n      </Badge>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  icon: {\n    // We render the icon twice at the same position on top of each other:\n    // active and inactive one, so we can fade between them:\n    // Cover the whole iconContainer:\n    position: 'absolute',\n    alignSelf: 'center',\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: '100%',\n    width: '100%',\n    // Workaround for react-native >= 0.54 layout bug\n    minWidth: 25,\n  },\n  iconVertical: {\n    flex: 1,\n  },\n  iconHorizontal: {\n    height: '100%',\n    marginTop: 3,\n  },\n  badge: {\n    position: 'absolute',\n    left: 3,\n  },\n  badgeVertical: {\n    top: 3,\n  },\n  badgeHorizontal: {\n    top: 7,\n  },\n});\n","import { Link, Route, useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport React from 'react';\nimport {\n  GestureResponderEvent,\n  Platform,\n  Pressable,\n  StyleProp,\n  StyleSheet,\n  Text,\n  TextStyle,\n  ViewStyle,\n} from 'react-native';\n\nimport type { BottomTabBarButtonProps, LabelPosition } from '../types';\nimport TabBarIcon from './TabBarIcon';\n\ntype Props = {\n  /**\n   * Whether the tab is focused.\n   */\n  focused: boolean;\n  /**\n   * The route object which should be specified by the tab.\n   */\n  route: Route<string>;\n  /**\n   * The label text of the tab.\n   */\n  label:\n    | string\n    | ((props: {\n        focused: boolean;\n        color: string;\n        position: LabelPosition;\n      }) => React.ReactNode);\n  /**\n   * Icon to display for the tab.\n   */\n  icon: (props: {\n    focused: boolean;\n    size: number;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Text to show in a badge on the tab icon.\n   */\n  badge?: number | string;\n  /**\n   * Custom style for the badge.\n   */\n  badgeStyle?: StyleProp<TextStyle>;\n  /**\n   * URL to use for the link to the tab.\n   */\n  to?: string;\n  /**\n   * The button for the tab. Uses a `TouchableWithoutFeedback` by default.\n   */\n  button?: (props: BottomTabBarButtonProps) => React.ReactNode;\n  /**\n   * The accessibility label for the tab.\n   */\n  accessibilityLabel?: string;\n  /**\n   * An unique ID for testing for the tab.\n   */\n  testID?: string;\n  /**\n   * Function to execute on press in React Native.\n   * On the web, this will use onClick.\n   */\n  onPress: (\n    e: React.MouseEvent<HTMLElement, MouseEvent> | GestureResponderEvent\n  ) => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress: (e: GestureResponderEvent) => void;\n  /**\n   * Whether the label should be aligned with the icon horizontally.\n   */\n  horizontal: boolean;\n  /**\n   * Color for the icon and label when the item is active.\n   */\n  activeTintColor?: string;\n  /**\n   * Color for the icon and label when the item is inactive.\n   */\n  inactiveTintColor?: string;\n  /**\n   * Background color for item when its active.\n   */\n  activeBackgroundColor?: string;\n  /**\n   * Background color for item when its inactive.\n   */\n  inactiveBackgroundColor?: string;\n  /**\n   * Whether to show the label text for the tab.\n   */\n  showLabel?: boolean;\n  /**\n   * Whether to allow scaling the font for the label for accessibility purposes.\n   */\n  allowFontScaling?: boolean;\n  /**\n   * Style object for the label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * Style object for the icon element.\n   */\n  iconStyle?: StyleProp<ViewStyle>;\n  /**\n   * Style object for the wrapper element.\n   */\n  style?: StyleProp<ViewStyle>;\n};\n\nexport default function BottomTabBarItem({\n  focused,\n  route,\n  label,\n  icon,\n  badge,\n  badgeStyle,\n  to,\n  button = ({\n    children,\n    style,\n    onPress,\n    to,\n    accessibilityRole,\n    ...rest\n  }: BottomTabBarButtonProps) => {\n    if (Platform.OS === 'web' && to) {\n      // React Native Web doesn't forward `onClick` if we use `TouchableWithoutFeedback`.\n      // We need to use `onClick` to be able to prevent default browser handling of links.\n      return (\n        <Link\n          {...rest}\n          to={to}\n          style={[styles.button, style]}\n          onPress={(e: any) => {\n            if (\n              !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n              (e.button == null || e.button === 0) // ignore everything but left clicks\n            ) {\n              e.preventDefault();\n              onPress?.(e);\n            }\n          }}\n        >\n          {children}\n        </Link>\n      );\n    } else {\n      return (\n        <Pressable\n          {...rest}\n          accessibilityRole={accessibilityRole}\n          onPress={onPress}\n          style={style}\n        >\n          {children}\n        </Pressable>\n      );\n    }\n  },\n  accessibilityLabel,\n  testID,\n  onPress,\n  onLongPress,\n  horizontal,\n  activeTintColor: customActiveTintColor,\n  inactiveTintColor: customInactiveTintColor,\n  activeBackgroundColor = 'transparent',\n  inactiveBackgroundColor = 'transparent',\n  showLabel = true,\n  allowFontScaling,\n  labelStyle,\n  iconStyle,\n  style,\n}: Props) {\n  const { colors } = useTheme();\n\n  const activeTintColor =\n    customActiveTintColor === undefined\n      ? colors.primary\n      : customActiveTintColor;\n\n  const inactiveTintColor =\n    customInactiveTintColor === undefined\n      ? Color(colors.text).mix(Color(colors.card), 0.5).hex()\n      : customInactiveTintColor;\n\n  const renderLabel = ({ focused }: { focused: boolean }) => {\n    if (showLabel === false) {\n      return null;\n    }\n\n    const color = focused ? activeTintColor : inactiveTintColor;\n\n    if (typeof label === 'string') {\n      return (\n        <Text\n          numberOfLines={1}\n          style={[\n            styles.label,\n            { color },\n            horizontal ? styles.labelBeside : styles.labelBeneath,\n            labelStyle,\n          ]}\n          allowFontScaling={allowFontScaling}\n        >\n          {label}\n        </Text>\n      );\n    }\n\n    return label({\n      focused,\n      color,\n      position: horizontal ? 'beside-icon' : 'below-icon',\n    });\n  };\n\n  const renderIcon = ({ focused }: { focused: boolean }) => {\n    if (icon === undefined) {\n      return null;\n    }\n\n    const activeOpacity = focused ? 1 : 0;\n    const inactiveOpacity = focused ? 0 : 1;\n\n    return (\n      <TabBarIcon\n        route={route}\n        horizontal={horizontal}\n        badge={badge}\n        badgeStyle={badgeStyle}\n        activeOpacity={activeOpacity}\n        inactiveOpacity={inactiveOpacity}\n        activeTintColor={activeTintColor}\n        inactiveTintColor={inactiveTintColor}\n        renderIcon={icon}\n        style={iconStyle}\n      />\n    );\n  };\n\n  const scene = { route, focused };\n\n  const backgroundColor = focused\n    ? activeBackgroundColor\n    : inactiveBackgroundColor;\n\n  return button({\n    to,\n    onPress,\n    onLongPress,\n    testID,\n    accessibilityLabel,\n    // FIXME: accessibilityRole: 'tab' doesn't seem to work as expected on iOS\n    accessibilityRole: Platform.select({ ios: 'button', default: 'tab' }),\n    accessibilityState: { selected: focused },\n    // @ts-expect-error: keep for compatibility with older React Native versions\n    accessibilityStates: focused ? ['selected'] : [],\n    style: [\n      styles.tab,\n      { backgroundColor },\n      horizontal ? styles.tabLandscape : styles.tabPortrait,\n      style,\n    ],\n    children: (\n      <React.Fragment>\n        {renderIcon(scene)}\n        {renderLabel(scene)}\n      </React.Fragment>\n    ),\n  }) as React.ReactElement;\n}\n\nconst styles = StyleSheet.create({\n  tab: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  tabPortrait: {\n    justifyContent: 'flex-end',\n    flexDirection: 'column',\n  },\n  tabLandscape: {\n    justifyContent: 'center',\n    flexDirection: 'row',\n  },\n  label: {\n    textAlign: 'center',\n    backgroundColor: 'transparent',\n  },\n  labelBeneath: {\n    fontSize: 10,\n  },\n  labelBeside: {\n    fontSize: 13,\n    marginLeft: 20,\n    marginTop: 3,\n  },\n  button: {\n    display: 'flex',\n  },\n});\n","import { MissingIcon } from '@react-navigation/elements';\nimport {\n  CommonActions,\n  NavigationContext,\n  NavigationRouteContext,\n  ParamListBase,\n  TabNavigationState,\n  useLinkBuilder,\n  useTheme,\n} from '@react-navigation/native';\nimport React from 'react';\nimport {\n  Animated,\n  LayoutChangeEvent,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport { EdgeInsets, useSafeAreaFrame } from 'react-native-safe-area-context';\n\nimport type { BottomTabBarProps, BottomTabDescriptorMap } from '../types';\nimport BottomTabBarHeightCallbackContext from '../utils/BottomTabBarHeightCallbackContext';\nimport useIsKeyboardShown from '../utils/useIsKeyboardShown';\nimport BottomTabItem from './BottomTabItem';\n\ntype Props = BottomTabBarProps & {\n  style?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n};\n\nconst DEFAULT_TABBAR_HEIGHT = 49;\nconst COMPACT_TABBAR_HEIGHT = 32;\nconst DEFAULT_MAX_TAB_ITEM_WIDTH = 125;\n\nconst useNativeDriver = Platform.OS !== 'web';\n\ntype Options = {\n  state: TabNavigationState<ParamListBase>;\n  descriptors: BottomTabDescriptorMap;\n  layout: { height: number; width: number };\n  dimensions: { height: number; width: number };\n};\n\nconst shouldUseHorizontalLabels = ({\n  state,\n  descriptors,\n  layout,\n  dimensions,\n}: Options) => {\n  const { tabBarLabelPosition } =\n    descriptors[state.routes[state.index].key].options;\n\n  if (tabBarLabelPosition) {\n    switch (tabBarLabelPosition) {\n      case 'beside-icon':\n        return true;\n      case 'below-icon':\n        return false;\n    }\n  }\n\n  if (layout.width >= 768) {\n    // Screen size matches a tablet\n    const maxTabWidth = state.routes.reduce((acc, route) => {\n      const { tabBarItemStyle } = descriptors[route.key].options;\n      const flattenedStyle = StyleSheet.flatten(tabBarItemStyle);\n\n      if (flattenedStyle) {\n        if (typeof flattenedStyle.width === 'number') {\n          return acc + flattenedStyle.width;\n        } else if (typeof flattenedStyle.maxWidth === 'number') {\n          return acc + flattenedStyle.maxWidth;\n        }\n      }\n\n      return acc + DEFAULT_MAX_TAB_ITEM_WIDTH;\n    }, 0);\n\n    return maxTabWidth <= layout.width;\n  } else {\n    return dimensions.width > dimensions.height;\n  }\n};\n\nconst getPaddingBottom = (insets: EdgeInsets) =>\n  Math.max(insets.bottom - Platform.select({ ios: 4, default: 0 }), 0);\n\nexport const getTabBarHeight = ({\n  state,\n  descriptors,\n  dimensions,\n  insets,\n  style,\n  ...rest\n}: Options & {\n  insets: EdgeInsets;\n  style: Animated.WithAnimatedValue<StyleProp<ViewStyle>> | undefined;\n}) => {\n  // @ts-ignore\n  const customHeight = StyleSheet.flatten(style)?.height;\n\n  if (typeof customHeight === 'number') {\n    return customHeight;\n  }\n\n  const isLandscape = dimensions.width > dimensions.height;\n  const horizontalLabels = shouldUseHorizontalLabels({\n    state,\n    descriptors,\n    dimensions,\n    ...rest,\n  });\n  const paddingBottom = getPaddingBottom(insets);\n\n  if (\n    Platform.OS === 'ios' &&\n    !Platform.isPad &&\n    isLandscape &&\n    horizontalLabels\n  ) {\n    return COMPACT_TABBAR_HEIGHT + paddingBottom;\n  }\n\n  return DEFAULT_TABBAR_HEIGHT + paddingBottom;\n};\n\nexport default function BottomTabBar({\n  state,\n  navigation,\n  descriptors,\n  insets,\n  style,\n}: Props) {\n  const { colors } = useTheme();\n  const buildLink = useLinkBuilder();\n\n  const focusedRoute = state.routes[state.index];\n  const focusedDescriptor = descriptors[focusedRoute.key];\n  const focusedOptions = focusedDescriptor.options;\n\n  const {\n    tabBarShowLabel,\n    tabBarHideOnKeyboard = false,\n    tabBarVisibilityAnimationConfig,\n    tabBarStyle,\n    tabBarBackground,\n    tabBarActiveTintColor,\n    tabBarInactiveTintColor,\n    tabBarActiveBackgroundColor,\n    tabBarInactiveBackgroundColor,\n  } = focusedOptions;\n\n  const dimensions = useSafeAreaFrame();\n  const isKeyboardShown = useIsKeyboardShown();\n\n  const onHeightChange = React.useContext(BottomTabBarHeightCallbackContext);\n\n  const shouldShowTabBar = !(tabBarHideOnKeyboard && isKeyboardShown);\n\n  const visibilityAnimationConfigRef = React.useRef(\n    tabBarVisibilityAnimationConfig\n  );\n\n  React.useEffect(() => {\n    visibilityAnimationConfigRef.current = tabBarVisibilityAnimationConfig;\n  });\n\n  const [isTabBarHidden, setIsTabBarHidden] = React.useState(!shouldShowTabBar);\n\n  const [visible] = React.useState(\n    () => new Animated.Value(shouldShowTabBar ? 1 : 0)\n  );\n\n  React.useEffect(() => {\n    const visibilityAnimationConfig = visibilityAnimationConfigRef.current;\n\n    if (shouldShowTabBar) {\n      const animation =\n        visibilityAnimationConfig?.show?.animation === 'spring'\n          ? Animated.spring\n          : Animated.timing;\n\n      animation(visible, {\n        toValue: 1,\n        useNativeDriver,\n        duration: 250,\n        ...visibilityAnimationConfig?.show?.config,\n      }).start(({ finished }) => {\n        if (finished) {\n          setIsTabBarHidden(false);\n        }\n      });\n    } else {\n      setIsTabBarHidden(true);\n\n      const animation =\n        visibilityAnimationConfig?.hide?.animation === 'spring'\n          ? Animated.spring\n          : Animated.timing;\n\n      animation(visible, {\n        toValue: 0,\n        useNativeDriver,\n        duration: 200,\n        ...visibilityAnimationConfig?.hide?.config,\n      }).start();\n    }\n\n    return () => visible.stopAnimation();\n  }, [visible, shouldShowTabBar]);\n\n  const [layout, setLayout] = React.useState({\n    height: 0,\n    width: dimensions.width,\n  });\n\n  const handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    onHeightChange?.(height);\n\n    setLayout((layout) => {\n      if (height === layout.height && width === layout.width) {\n        return layout;\n      } else {\n        return {\n          height,\n          width,\n        };\n      }\n    });\n  };\n\n  const { routes } = state;\n\n  const paddingBottom = getPaddingBottom(insets);\n  const tabBarHeight = getTabBarHeight({\n    state,\n    descriptors,\n    insets,\n    dimensions,\n    layout,\n    style: [tabBarStyle, style],\n  });\n\n  const hasHorizontalLabels = shouldUseHorizontalLabels({\n    state,\n    descriptors,\n    dimensions,\n    layout,\n  });\n\n  const tabBarBackgroundElement = tabBarBackground?.();\n\n  return (\n    <Animated.View\n      style={[\n        styles.tabBar,\n        {\n          backgroundColor:\n            tabBarBackgroundElement != null ? 'transparent' : colors.card,\n          borderTopColor: colors.border,\n        },\n        {\n          transform: [\n            {\n              translateY: visible.interpolate({\n                inputRange: [0, 1],\n                outputRange: [\n                  layout.height + paddingBottom + StyleSheet.hairlineWidth,\n                  0,\n                ],\n              }),\n            },\n          ],\n          // Absolutely position the tab bar so that the content is below it\n          // This is needed to avoid gap at bottom when the tab bar is hidden\n          position: isTabBarHidden ? 'absolute' : (null as any),\n        },\n        {\n          height: tabBarHeight,\n          paddingBottom,\n          paddingHorizontal: Math.max(insets.left, insets.right),\n        },\n        tabBarStyle,\n      ]}\n      pointerEvents={isTabBarHidden ? 'none' : 'auto'}\n      onLayout={handleLayout}\n    >\n      <View pointerEvents=\"none\" style={StyleSheet.absoluteFill}>\n        {tabBarBackgroundElement}\n      </View>\n      <View accessibilityRole=\"tablist\" style={styles.content}>\n        {routes.map((route, index) => {\n          const focused = index === state.index;\n          const { options } = descriptors[route.key];\n\n          const onPress = () => {\n            const event = navigation.emit({\n              type: 'tabPress',\n              target: route.key,\n              canPreventDefault: true,\n            });\n\n            if (!focused && !event.defaultPrevented) {\n              navigation.dispatch({\n                ...CommonActions.navigate({ name: route.name, merge: true }),\n                target: state.key,\n              });\n            }\n          };\n\n          const onLongPress = () => {\n            navigation.emit({\n              type: 'tabLongPress',\n              target: route.key,\n            });\n          };\n\n          const label =\n            options.tabBarLabel !== undefined\n              ? options.tabBarLabel\n              : options.title !== undefined\n              ? options.title\n              : route.name;\n\n          const accessibilityLabel =\n            options.tabBarAccessibilityLabel !== undefined\n              ? options.tabBarAccessibilityLabel\n              : typeof label === 'string' && Platform.OS === 'ios'\n              ? `${label}, tab, ${index + 1} of ${routes.length}`\n              : undefined;\n\n          return (\n            <NavigationContext.Provider\n              key={route.key}\n              value={descriptors[route.key].navigation}\n            >\n              <NavigationRouteContext.Provider value={route}>\n                <BottomTabItem\n                  route={route}\n                  focused={focused}\n                  horizontal={hasHorizontalLabels}\n                  onPress={onPress}\n                  onLongPress={onLongPress}\n                  accessibilityLabel={accessibilityLabel}\n                  to={buildLink(route.name, route.params)}\n                  testID={options.tabBarTestID}\n                  allowFontScaling={options.tabBarAllowFontScaling}\n                  activeTintColor={tabBarActiveTintColor}\n                  inactiveTintColor={tabBarInactiveTintColor}\n                  activeBackgroundColor={tabBarActiveBackgroundColor}\n                  inactiveBackgroundColor={tabBarInactiveBackgroundColor}\n                  button={options.tabBarButton}\n                  icon={\n                    options.tabBarIcon ??\n                    (({ color, size }) => (\n                      <MissingIcon color={color} size={size} />\n                    ))\n                  }\n                  badge={options.tabBarBadge}\n                  badgeStyle={options.tabBarBadgeStyle}\n                  label={label}\n                  showLabel={tabBarShowLabel}\n                  labelStyle={options.tabBarLabelStyle}\n                  iconStyle={options.tabBarIconStyle}\n                  style={options.tabBarItemStyle}\n                />\n              </NavigationRouteContext.Provider>\n            </NavigationContext.Provider>\n          );\n        })}\n      </View>\n    </Animated.View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  tabBar: {\n    left: 0,\n    right: 0,\n    bottom: 0,\n    borderTopWidth: StyleSheet.hairlineWidth,\n    elevation: 8,\n  },\n  content: {\n    flex: 1,\n    flexDirection: 'row',\n  },\n});\n","import * as React from 'react';\nimport { EmitterSubscription, Keyboard, Platform } from 'react-native';\n\nexport default function useIsKeyboardShown() {\n  const [isKeyboardShown, setIsKeyboardShown] = React.useState(false);\n\n  React.useEffect(() => {\n    const handleKeyboardShow = () => setIsKeyboardShown(true);\n    const handleKeyboardHide = () => setIsKeyboardShown(false);\n\n    let subscriptions: EmitterSubscription[];\n\n    if (Platform.OS === 'ios') {\n      subscriptions = [\n        Keyboard.addListener('keyboardWillShow', handleKeyboardShow),\n        Keyboard.addListener('keyboardWillHide', handleKeyboardHide),\n      ];\n    } else {\n      subscriptions = [\n        Keyboard.addListener('keyboardDidShow', handleKeyboardShow),\n        Keyboard.addListener('keyboardDidHide', handleKeyboardHide),\n      ];\n    }\n\n    return () => {\n      subscriptions.forEach((s) => s.remove());\n    };\n  }, []);\n\n  return isKeyboardShown;\n}\n","import * as React from 'react';\nimport { Platform, StyleProp, StyleSheet, View, ViewStyle } from 'react-native';\n\ntype Props = {\n  visible: boolean;\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\nconst FAR_FAR_AWAY = 30000; // this should be big enough to move the whole view out of its container\n\nexport default function ResourceSavingScene({\n  visible,\n  children,\n  style,\n  ...rest\n}: Props) {\n  if (Platform.OS === 'web') {\n    return (\n      <View\n        // @ts-expect-error: hidden exists on web, but not in React Native\n        hidden={!visible}\n        style={[\n          { display: visible ? 'flex' : 'none' },\n          styles.container,\n          style,\n        ]}\n        pointerEvents={visible ? 'auto' : 'none'}\n        {...rest}\n      >\n        {children}\n      </View>\n    );\n  }\n\n  return (\n    <View\n      style={[styles.container, style]}\n      // box-none doesn't seem to work properly on Android\n      pointerEvents={visible ? 'auto' : 'none'}\n    >\n      <View\n        collapsable={false}\n        removeClippedSubviews={\n          // On iOS & macOS, set removeClippedSubviews to true only when not focused\n          // This is an workaround for a bug where the clipped view never re-appears\n          Platform.OS === 'ios' || Platform.OS === 'macos' ? !visible : true\n        }\n        pointerEvents={visible ? 'auto' : 'none'}\n        style={visible ? styles.attached : styles.detached}\n      >\n        {children}\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  attached: {\n    flex: 1,\n  },\n  detached: {\n    flex: 1,\n    top: FAR_FAR_AWAY,\n  },\n});\n","import { ResourceSavingView } from '@react-navigation/elements';\nimport * as React from 'react';\nimport { StyleProp, View, ViewProps, ViewStyle } from 'react-native';\n\ntype Props = {\n  visible: boolean;\n  children: React.ReactNode;\n  enabled: boolean;\n  style?: StyleProp<ViewStyle>;\n};\n\nlet Screens: typeof import('react-native-screens') | undefined;\n\ntry {\n  Screens = require('react-native-screens');\n} catch (e) {\n  // Ignore\n}\n\nexport const MaybeScreenContainer = ({\n  enabled,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  children: React.ReactNode;\n}) => {\n  if (Screens?.screensEnabled?.()) {\n    return <Screens.ScreenContainer enabled={enabled} {...rest} />;\n  }\n\n  return <View {...rest} />;\n};\n\nexport function MaybeScreen({ visible, children, ...rest }: Props) {\n  if (Screens?.screensEnabled?.()) {\n    return (\n      <Screens.Screen activityState={visible ? 2 : 0} {...rest}>\n        {children}\n      </Screens.Screen>\n    );\n  }\n\n  return (\n    <ResourceSavingView visible={visible} {...rest}>\n      {children}\n    </ResourceSavingView>\n  );\n}\n","import {\n  getHeaderTitle,\n  Header,\n  SafeAreaProviderCompat,\n  Screen,\n} from '@react-navigation/elements';\nimport type {\n  ParamListBase,\n  TabNavigationState,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport { Platform, StyleSheet } from 'react-native';\nimport { SafeAreaInsetsContext } from 'react-native-safe-area-context';\n\nimport type {\n  BottomTabBarProps,\n  BottomTabDescriptorMap,\n  BottomTabHeaderProps,\n  BottomTabNavigationConfig,\n  BottomTabNavigationHelpers,\n  BottomTabNavigationProp,\n} from '../types';\nimport BottomTabBarHeightCallbackContext from '../utils/BottomTabBarHeightCallbackContext';\nimport BottomTabBarHeightContext from '../utils/BottomTabBarHeightContext';\nimport BottomTabBar, { getTabBarHeight } from './BottomTabBar';\nimport { MaybeScreen, MaybeScreenContainer } from './ScreenFallback';\n\ntype Props = BottomTabNavigationConfig & {\n  state: TabNavigationState<ParamListBase>;\n  navigation: BottomTabNavigationHelpers;\n  descriptors: BottomTabDescriptorMap;\n};\n\nexport default function BottomTabView(props: Props) {\n  const {\n    tabBar = (props: BottomTabBarProps) => <BottomTabBar {...props} />,\n    state,\n    navigation,\n    descriptors,\n    safeAreaInsets,\n    detachInactiveScreens = Platform.OS === 'web' ||\n      Platform.OS === 'android' ||\n      Platform.OS === 'ios',\n    sceneContainerStyle,\n  } = props;\n\n  const focusedRouteKey = state.routes[state.index].key;\n  const [loaded, setLoaded] = React.useState([focusedRouteKey]);\n\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([...loaded, focusedRouteKey]);\n  }\n\n  const dimensions = SafeAreaProviderCompat.initialMetrics.frame;\n  const [tabBarHeight, setTabBarHeight] = React.useState(() =>\n    getTabBarHeight({\n      state,\n      descriptors,\n      dimensions,\n      layout: { width: dimensions.width, height: 0 },\n      insets: {\n        ...SafeAreaProviderCompat.initialMetrics.insets,\n        ...props.safeAreaInsets,\n      },\n      style: descriptors[state.routes[state.index].key].options.tabBarStyle,\n    })\n  );\n\n  const renderTabBar = () => {\n    return (\n      <SafeAreaInsetsContext.Consumer>\n        {(insets) =>\n          tabBar({\n            state: state,\n            descriptors: descriptors,\n            navigation: navigation,\n            insets: {\n              top: safeAreaInsets?.top ?? insets?.top ?? 0,\n              right: safeAreaInsets?.right ?? insets?.right ?? 0,\n              bottom: safeAreaInsets?.bottom ?? insets?.bottom ?? 0,\n              left: safeAreaInsets?.left ?? insets?.left ?? 0,\n            },\n          })\n        }\n      </SafeAreaInsetsContext.Consumer>\n    );\n  };\n\n  const { routes } = state;\n\n  return (\n    <SafeAreaProviderCompat>\n      <MaybeScreenContainer\n        enabled={detachInactiveScreens}\n        style={styles.container}\n      >\n        {routes.map((route, index) => {\n          const descriptor = descriptors[route.key];\n          const { lazy = true, unmountOnBlur } = descriptor.options;\n          const isFocused = state.index === index;\n\n          if (unmountOnBlur && !isFocused) {\n            return null;\n          }\n\n          if (lazy && !loaded.includes(route.key) && !isFocused) {\n            // Don't render a lazy screen if we've never navigated to it\n            return null;\n          }\n\n          const {\n            header = ({ layout, options }: BottomTabHeaderProps) => (\n              <Header\n                {...options}\n                layout={layout}\n                title={getHeaderTitle(options, route.name)}\n              />\n            ),\n          } = descriptor.options;\n\n          return (\n            <MaybeScreen\n              key={route.key}\n              style={[StyleSheet.absoluteFill, { zIndex: isFocused ? 0 : -1 }]}\n              visible={isFocused}\n              enabled={detachInactiveScreens}\n            >\n              <BottomTabBarHeightContext.Provider value={tabBarHeight}>\n                <Screen\n                  focused={isFocused}\n                  route={descriptor.route}\n                  navigation={descriptor.navigation}\n                  headerShown={descriptor.options.headerShown}\n                  headerTransparent={descriptor.options.headerTransparent}\n                  headerStatusBarHeight={\n                    descriptor.options.headerStatusBarHeight\n                  }\n                  header={header({\n                    layout: dimensions,\n                    route: descriptor.route,\n                    navigation:\n                      descriptor.navigation as BottomTabNavigationProp<ParamListBase>,\n                    options: descriptor.options,\n                  })}\n                  style={sceneContainerStyle}\n                >\n                  {descriptor.render()}\n                </Screen>\n              </BottomTabBarHeightContext.Provider>\n            </MaybeScreen>\n          );\n        })}\n      </MaybeScreenContainer>\n      <BottomTabBarHeightCallbackContext.Provider value={setTabBarHeight}>\n        {renderTabBar()}\n      </BottomTabBarHeightCallbackContext.Provider>\n    </SafeAreaProviderCompat>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n});\n","import {\n  createNavigatorFactory,\n  DefaultNavigatorOptions,\n  ParamListBase,\n  TabActionHelpers,\n  TabNavigationState,\n  TabRouter,\n  TabRouterOptions,\n  useNavigationBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport warnOnce from 'warn-once';\n\nimport type {\n  BottomTabNavigationConfig,\n  BottomTabNavigationEventMap,\n  BottomTabNavigationOptions,\n} from '../types';\nimport BottomTabView from '../views/BottomTabView';\n\ntype Props = DefaultNavigatorOptions<\n  ParamListBase,\n  TabNavigationState<ParamListBase>,\n  BottomTabNavigationOptions,\n  BottomTabNavigationEventMap\n> &\n  TabRouterOptions &\n  BottomTabNavigationConfig;\n\nfunction BottomTabNavigator({\n  initialRouteName,\n  backBehavior,\n  children,\n  screenListeners,\n  screenOptions,\n  sceneContainerStyle,\n  ...restWithDeprecated\n}: Props) {\n  const {\n    // @ts-expect-error: lazy is deprecated\n    lazy,\n    // @ts-expect-error: tabBarOptions is deprecated\n    tabBarOptions,\n    ...rest\n  } = restWithDeprecated;\n\n  let defaultScreenOptions: BottomTabNavigationOptions = {};\n\n  if (tabBarOptions) {\n    Object.assign(defaultScreenOptions, {\n      tabBarHideOnKeyboard: tabBarOptions.keyboardHidesTabBar,\n      tabBarActiveTintColor: tabBarOptions.activeTintColor,\n      tabBarInactiveTintColor: tabBarOptions.inactiveTintColor,\n      tabBarActiveBackgroundColor: tabBarOptions.activeBackgroundColor,\n      tabBarInactiveBackgroundColor: tabBarOptions.inactiveBackgroundColor,\n      tabBarAllowFontScaling: tabBarOptions.allowFontScaling,\n      tabBarShowLabel: tabBarOptions.showLabel,\n      tabBarLabelStyle: tabBarOptions.labelStyle,\n      tabBarIconStyle: tabBarOptions.iconStyle,\n      tabBarItemStyle: tabBarOptions.tabStyle,\n      tabBarLabelPosition:\n        tabBarOptions.labelPosition ??\n        (tabBarOptions.adaptive === false ? 'below-icon' : undefined),\n      tabBarStyle: [\n        { display: tabBarOptions.tabBarVisible ? 'none' : 'flex' },\n        defaultScreenOptions.tabBarStyle,\n      ],\n    });\n\n    (\n      Object.keys(defaultScreenOptions) as (keyof BottomTabNavigationOptions)[]\n    ).forEach((key) => {\n      if (defaultScreenOptions[key] === undefined) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete defaultScreenOptions[key];\n      }\n    });\n\n    warnOnce(\n      tabBarOptions,\n      `Bottom Tab Navigator: 'tabBarOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n${JSON.stringify(\n        defaultScreenOptions,\n        null,\n        2\n      )}\\n\\nSee https://reactnavigation.org/docs/bottom-tab-navigator#options for more details.`\n    );\n  }\n\n  if (typeof lazy === 'boolean') {\n    defaultScreenOptions.lazy = lazy;\n\n    warnOnce(\n      true,\n      `Bottom Tab Navigator: 'lazy' in props is deprecated. Move it to 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/bottom-tab-navigator/#lazy for more details.`\n    );\n  }\n\n  const { state, descriptors, navigation, NavigationContent } =\n    useNavigationBuilder<\n      TabNavigationState<ParamListBase>,\n      TabRouterOptions,\n      TabActionHelpers<ParamListBase>,\n      BottomTabNavigationOptions,\n      BottomTabNavigationEventMap\n    >(TabRouter, {\n      initialRouteName,\n      backBehavior,\n      children,\n      screenListeners,\n      screenOptions,\n      defaultScreenOptions,\n    });\n\n  return (\n    <NavigationContent>\n      <BottomTabView\n        {...rest}\n        state={state}\n        navigation={navigation}\n        descriptors={descriptors}\n        sceneContainerStyle={sceneContainerStyle}\n      />\n    </NavigationContent>\n  );\n}\n\nexport default createNavigatorFactory<\n  TabNavigationState<ParamListBase>,\n  BottomTabNavigationOptions,\n  BottomTabNavigationEventMap,\n  typeof BottomTabNavigator\n>(BottomTabNavigator);\n"],"sourceRoot":""}