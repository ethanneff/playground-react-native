{"version":3,"sources":["apps/Arcade/Archero/index.tsx","apps/Arcade/FlappyBird/index.tsx","apps/Arcade/types.ts","apps/Arcade/Landing/index.tsx","apps/Arcade/PapiJump/index.tsx","apps/Arcade/Snake/index.web.tsx","apps/Arcade/TicTacToe/utils.ts","apps/Arcade/TicTacToe/index.tsx","apps/Arcade/index.tsx"],"names":["charSize","getLimit","value","limit","getBounds","size","Archero","memo","color","useColor","goBack","useNavigation","useNativeDriver","useDriver","timer","useRef","interval","gesture","x0","y0","dx","dy","window","useRootSelector","state","dimension","useState","width","height","dimensions","setDimensions","joystickSize","joystickCenter","thumbSize","initialJoystickLoc","x","y","initialCharLoc","initialThumbLoc","characterValueXY","joystick","Animated","ValueXY","thumb","character","addListener","panGesture","PanResponder","create","onStartShouldSetPanResponder","onMoveShouldSetPanResponderCapture","onPanResponderStart","_","g","current","onUpdate","onPanResponderMove","onPanResponderRelease","setInterval","clearInterval","spring","toValue","start","offset","offset2","moveJoystick","vx","vy","moveCharacter","angle","Math","atan2","dz","sqrt","pow","z","sin","cos","moveThumb","onLayout","useCallback","event","layout","nativeEvent","onLeftPress","title","View","style","flex","backgroundColor","background","tertiary","panHandlers","getLayout","accent","justifyContent","alignItems","borderRadius","overlay","light","colorWithOpacity","Bird","negative","Pillar","location","direction","useEffect","onPress","onTouchStart","positive","FlappyBird","secondary","arcadeScreens","Landing","navigate","useAdminNavBack","screen","ScrollView","map","key","Papi","dropShadow","useDropShadow","timing","duration","easing","Easing","bounce","PapiJump","styles","StyleSheet","container","Snake","dfs","m","d","i","j","t","c","length","val","max","getInitialState","boardSize","board","row","push","turn","winner","TicTacToe","game","setGame","smallest","getSmallestDimension","landscape","getLandscapeOrientation","buttonTitle","turnTitle","onButtonPress","onCellPress","p","nextValue","updatedBoard","v","copy","getUpdatedBoard","didWin","col","dRow","dCol","getWinner","flexDirection","disabled","primaryA","borderWidth","borderColor","n","type","noHeader","headerShown","Stack","createStackNavigator","Navigator","screenOptions","Screen","component","name"],"mappings":"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","file":"static/js/10.3b5ac5f7.chunk.js","sourcesContent":["import { useNavigation } from '@react-navigation/native';\nimport React, { memo, useCallback, useRef, useState } from 'react';\nimport {\n  Animated,\n  LayoutChangeEvent,\n  PanResponder,\n  PanResponderInstance,\n  View,\n} from 'react-native';\nimport { Screen } from '../../../components';\nimport { colorWithOpacity, useColor, useDriver } from '../../../features';\nimport { useRootSelector } from '../../../redux';\n\nconst charSize = 50;\nconst charSpeed = 40;\nconst fps = 1000 / 60;\n\nconst getLimit = (value: number, limit: number) =>\n  value > limit ? limit : value < -limit ? -limit : value;\nconst getBounds = (value: number, limit: number, size: number) =>\n  value > limit - size ? limit - size : value < 0 ? 0 : value;\n\nexport const Archero = memo(function Archero() {\n  const color = useColor();\n  const { goBack } = useNavigation();\n  const useNativeDriver = useDriver();\n  const timer = useRef(false);\n  const interval = useRef<ReturnType<typeof setInterval> | null>(null);\n  const gesture = useRef({ x0: 0, y0: 0, dx: 0, dy: 0 });\n  const window = useRootSelector(state => state.dimension.window);\n  const [dimensions, setDimensions] = useState({ width: 1000, height: 1000 });\n  const { width, height } = dimensions;\n  const smallest = width > height ? height : width;\n  const joystickSize = smallest / 3;\n  const joystickCenter = joystickSize / 2;\n  const thumbSize = joystickSize / 3;\n  const initialJoystickLoc = {\n    x: width / 2 - joystickCenter,\n    y: height - joystickSize - 75,\n  };\n  const initialCharLoc = {\n    x: width / 2 - charSize / 2,\n    y: height / 2 - charSize / 2,\n  };\n  const initialThumbLoc = { x: 0, y: 0 };\n  let characterValueXY = initialCharLoc;\n  const joystick: Animated.ValueXY = new Animated.ValueXY(initialJoystickLoc);\n  const thumb: Animated.ValueXY = new Animated.ValueXY(initialThumbLoc);\n  const character: Animated.ValueXY = new Animated.ValueXY(initialCharLoc);\n  character.addListener(({ x, y }) => {\n    characterValueXY = { x, y };\n  });\n\n  const moveCharacter = () => {\n    const { dx, dy } = gesture.current;\n    const vx = getLimit(dx, charSpeed);\n    const vy = getLimit(dy, charSpeed);\n    const x = getBounds(characterValueXY.x + vx, width, charSize);\n    const y = getBounds(characterValueXY.y + vy, height, charSize);\n    Animated.spring(character, {\n      toValue: { x, y },\n      useNativeDriver,\n    }).start();\n  };\n\n  const moveThumb = () => {\n    const { dx, dy } = gesture.current;\n    const angle = Math.atan2(dx, dy);\n    const dz = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));\n    const z = getLimit(dz, thumbSize);\n    const x = z * Math.sin(angle);\n    const y = z * Math.cos(angle);\n    Animated.spring(thumb, {\n      toValue: { x, y },\n      useNativeDriver,\n    }).start();\n  };\n\n  const moveJoystick = () => {\n    const { x0, y0 } = gesture.current;\n    const offset = window.height - dimensions.height;\n    const offset2 = window.width - dimensions.width;\n    const toValue = {\n      x: x0 - joystickCenter - offset2 / 2,\n      y: y0 - joystickCenter - offset / 2 - joystickSize / 1.5,\n    };\n    Animated.spring(joystick, { toValue, useNativeDriver }).start();\n  };\n\n  const resetJoystick = () => {\n    Animated.spring(joystick, {\n      toValue: initialJoystickLoc,\n      useNativeDriver,\n    }).start();\n    Animated.spring(thumb, {\n      toValue: initialThumbLoc,\n      useNativeDriver,\n    }).start();\n  };\n\n  const panGesture: PanResponderInstance = PanResponder.create({\n    onStartShouldSetPanResponder: () => true,\n    onMoveShouldSetPanResponderCapture: () => true,\n    onPanResponderStart: (_, g) => {\n      timer.current = true;\n      gesture.current = { x0: g.x0, y0: g.y0, dx: g.dx, dy: g.dy };\n      onUpdate();\n    },\n    onPanResponderMove: (_, g) => {\n      gesture.current = { x0: g.x0, y0: g.y0, dx: g.dx, dy: g.dy };\n    },\n    onPanResponderRelease: () => {\n      timer.current = false;\n    },\n  });\n\n  const onUpdate = () => {\n    interval.current = setInterval(() => {\n      if (!timer.current) {\n        if (interval.current) clearInterval(interval.current);\n\n        resetJoystick();\n        return;\n      }\n      moveJoystick();\n      moveCharacter();\n      moveThumb();\n    }, fps);\n  };\n\n  const onLayout = useCallback((event: LayoutChangeEvent) => {\n    const layout = event.nativeEvent.layout;\n    setDimensions({ width: layout.width, height: layout.height });\n  }, []);\n\n  return (\n    <Screen onLeftPress={goBack} title=\"Archero\">\n      <View\n        onLayout={onLayout}\n        style={{ flex: 1, backgroundColor: color.background.tertiary }}\n        {...panGesture.panHandlers}\n      >\n        <Animated.View\n          style={[\n            character.getLayout(),\n            {\n              width: charSize,\n              height: charSize,\n              backgroundColor: color.background.accent,\n            },\n          ]}\n        />\n        <Animated.View\n          style={[\n            joystick.getLayout(),\n            {\n              justifyContent: 'center',\n              alignItems: 'center',\n              borderRadius: 500,\n              width: joystickSize,\n              height: joystickSize,\n              backgroundColor: color.overlay.light,\n            },\n          ]}\n        >\n          <View\n            style={{\n              justifyContent: 'center',\n              alignItems: 'center',\n              borderRadius: 500,\n              width: thumbSize,\n              height: thumbSize,\n              backgroundColor: color.overlay.light,\n            }}\n          >\n            <Animated.View\n              style={[\n                thumb.getLayout(),\n                {\n                  borderRadius: 500,\n                  width: thumbSize,\n                  height: thumbSize,\n                  backgroundColor: colorWithOpacity(\n                    color.background.accent,\n                    0.8,\n                  ),\n                },\n              ]}\n            />\n          </View>\n        </Animated.View>\n      </View>\n    </Screen>\n  );\n});\n","import { useNavigation } from '@react-navigation/native';\nimport React, { memo, useCallback, useEffect, useRef } from 'react';\nimport { Animated, View } from 'react-native';\nimport { Screen } from '../../../components';\nimport { useColor, useDriver } from '../../../features';\n\nconst Bird = () => {\n  const color = useColor();\n  return (\n    <Animated.View\n      style={{\n        backgroundColor: color.background.negative,\n        width: 50,\n        height: 50,\n      }}\n    />\n  );\n};\n\nconst Pillar = () => {\n  const color = useColor();\n  const useNativeDriver = useDriver();\n  const location = useRef(new Animated.ValueXY({ x: 0, y: 0 }));\n  const state = useRef({ x: 0, y: 0, direction: 1 });\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const { y, direction } = state.current;\n      state.current.y = y + 1 * direction;\n      Animated.spring(location.current, {\n        toValue: state.current,\n        useNativeDriver,\n      }).start();\n    }, 20);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [useNativeDriver, location]);\n\n  const onPress = useCallback(() => {\n    state.current.direction = -1;\n  }, []);\n\n  return (\n    <Animated.View\n      onTouchStart={onPress}\n      style={[\n        location.current.getLayout(),\n        {\n          backgroundColor: color.background.positive,\n          width: 50,\n          height: 50,\n        },\n      ]}\n    />\n  );\n};\n\nexport const FlappyBird = memo(function FlappyBird() {\n  const color = useColor();\n  const { goBack } = useNavigation();\n\n  return (\n    <Screen onLeftPress={goBack} title=\"Flappy Bird\">\n      <View style={{ flex: 1, backgroundColor: color.background.secondary }}>\n        <Bird />\n        <Pillar />\n      </View>\n    </Screen>\n  );\n});\n","import { StackNavigationProp } from '@react-navigation/stack';\n\ntype Routes =\n  | 'landing'\n  | 'flappy-bird'\n  | 'snake'\n  | 'papi-jump'\n  | 'archero'\n  | 'tic-tac-toe';\n\nexport type ArcadeRoutes = { [key in Routes]: undefined };\n\nexport type ArcadeNavigation = StackNavigationProp<ArcadeRoutes>;\n\nexport const arcadeScreens: Routes[] = [\n  'landing',\n  'flappy-bird',\n  'snake',\n  'papi-jump',\n  'archero',\n  'tic-tac-toe',\n];\n","import { useNavigation } from '@react-navigation/native';\nimport React, { memo, useCallback } from 'react';\nimport { ScrollView } from 'react-native';\nimport { Button, Screen } from '../../../components';\nimport { useAdminNavBack, useColor } from '../../../features';\nimport { ArcadeNavigation, arcadeScreens } from '../types';\n\nexport const Landing = memo(function Landing() {\n  const color = useColor();\n  const { navigate } = useNavigation<ArcadeNavigation>();\n  const { onLeftPress } = useAdminNavBack();\n  const onPress = useCallback(screen => () => navigate(screen), [navigate]);\n\n  return (\n    <Screen onLeftPress={onLeftPress} title=\"Arcade\">\n      <ScrollView style={{ backgroundColor: color.background.secondary }}>\n        {arcadeScreens.map(screen => (\n          <Button key={screen} onPress={onPress(screen)} title={screen} />\n        ))}\n      </ScrollView>\n    </Screen>\n  );\n});\n","import { useNavigation } from '@react-navigation/native';\nimport React, { memo, useEffect, useRef } from 'react';\nimport { Animated, Easing, StyleSheet, View } from 'react-native';\nimport { Screen } from '../../../components';\nimport { useColor, useDriver, useDropShadow } from '../../../features';\n\ntype PapiProps = { size: number };\n\nconst Papi = memo(function PapiMemo({ size }: PapiProps) {\n  const color = useColor();\n  const dropShadow = useDropShadow();\n  const useNativeDriver = useDriver();\n  const location = useRef(new Animated.ValueXY({ x: 0, y: 0 })).current;\n\n  useEffect(() => {\n    const toValue = { x: 300, y: 600 };\n    Animated.timing(location, {\n      toValue,\n      duration: 3000,\n      easing: Easing.bounce,\n      useNativeDriver,\n    }).start();\n  }, [location, useNativeDriver]);\n\n  return (\n    <Animated.View\n      style={[\n        location.getLayout(),\n        {\n          height: size,\n          width: size,\n          borderRadius: size,\n          backgroundColor: color.background.positive,\n          ...dropShadow(5),\n        },\n      ]}\n    />\n  );\n});\n\nexport const PapiJump = memo(function PapiJump() {\n  const color = useColor();\n  const { goBack } = useNavigation();\n  const styles = StyleSheet.create({\n    container: {\n      backgroundColor: color.background.secondary,\n      flex: 1,\n    },\n  });\n\n  return (\n    <Screen onLeftPress={goBack} title=\"Papi Jump\">\n      <View style={styles.container}>\n        <Papi size={50} />\n      </View>\n    </Screen>\n  );\n});\n","import { useNavigation } from '@react-navigation/native';\nimport React, { memo } from 'react';\nimport { Screen } from '../../../components';\n\nexport const Snake = memo(function Snake() {\n  const { goBack } = useNavigation();\n\n  return <Screen onLeftPress={goBack} title=\"Snake\" />;\n});\n","import { Board, BoardValue, Direction, PlayerTurn, State } from './types';\n\nconst dfs = (\n  m: Board,\n  d: Direction,\n  i: number,\n  j: number,\n  t: BoardValue,\n  c = 0,\n) => {\n  if (i < 0 || j < 0 || i >= m.length || j >= m[0].length || m[i][j] !== t)\n    return 0;\n  c++;\n  const val = Math.max(dfs(m, d, i + d[0], j + d[1], t, c), c);\n  return val;\n};\n\nexport const getWinner = (\n  board: Board,\n  i: number,\n  j: number,\n  boardSize: number,\n): BoardValue => {\n  const t = board[i][j];\n  const row = dfs(board, [0, -1], i, j, t) + dfs(board, [0, 1], i, j, t) - 1;\n  const col = dfs(board, [-1, 0], i, j, t) + dfs(board, [1, 0], i, j, t) - 1;\n  const dRow = dfs(board, [-1, -1], i, j, t) + dfs(board, [1, 1], i, j, t) - 1;\n  const dCol = dfs(board, [-1, 1], i, j, t) + dfs(board, [1, -1], i, j, t) - 1;\n  return Math.max(row, col, dRow, dCol) === boardSize ? t : 0;\n};\n\nexport const getValue = (n: number): string =>\n  n === 0 ? '' : n === 1 ? 'x' : 'o';\n\nexport const getNextValue = (turn: PlayerTurn): BoardValue =>\n  turn === 'white' ? 1 : -1;\n\nexport const getUpdatedBoard = (\n  board: Board,\n  i: number,\n  j: number,\n  v: BoardValue,\n): Board => {\n  const copy = [...board];\n  copy[i][j] = v;\n  return copy;\n};\n\nexport const getInitialState = (boardSize: number): State => {\n  const board: Board = [];\n  for (let i = 0; i < boardSize; i++) {\n    const row: BoardValue[] = [];\n    for (let j = 0; j < boardSize; j++) row.push(0);\n    board.push(row);\n  }\n  return { board, turn: 'white', state: 'playing', winner: null };\n};\n","import { useNavigation } from '@react-navigation/native';\nimport React, { memo, useCallback, useState } from 'react';\nimport { View } from 'react-native';\nimport { Button, Screen, Text } from '../../../components';\nimport { TouchableOpacity } from '../../../conversions';\nimport { useColor } from '../../../features';\nimport {\n  getLandscapeOrientation,\n  getSmallestDimension,\n  useRootSelector,\n} from '../../../redux';\nimport { State } from './types';\nimport {\n  getInitialState,\n  getNextValue,\n  getUpdatedBoard,\n  getValue,\n  getWinner,\n} from './utils';\n\nexport const TicTacToe = memo(function TicTacToe() {\n  const boardSize = 3;\n  const color = useColor();\n  const { goBack } = useNavigation();\n\n  const [game, setGame] = useState<State>(getInitialState(boardSize));\n  const smallest = useRootSelector(getSmallestDimension);\n  const landscape = useRootSelector(getLandscapeOrientation);\n  const size = smallest / (boardSize + 1);\n  const buttonTitle = game.state === 'game-over' ? 'new game' : 'reset';\n  const turnTitle = game.winner\n    ? `winner ${game.winner}`\n    : `${game.turn}'s move`;\n\n  const onButtonPress = useCallback(() => {\n    setGame(getInitialState(boardSize));\n  }, []);\n\n  const onCellPress = useCallback(\n    (i: number, j: number) => () => {\n      setGame(p => {\n        const nextValue = getNextValue(p.turn);\n        const updatedBoard = getUpdatedBoard(p.board, i, j, nextValue);\n        const didWin = getWinner(p.board, i, j, boardSize);\n        const winner = didWin === 1 ? 'white' : didWin === -1 ? 'black' : null;\n        return {\n          ...p,\n          board: updatedBoard,\n          turn: p.turn === 'white' ? 'black' : 'white',\n          state: didWin !== 0 ? 'game-over' : 'playing',\n          winner,\n        };\n      });\n    },\n    [],\n  );\n\n  return (\n    <Screen onLeftPress={goBack} title=\"Tic Tac Toe\">\n      <View\n        style={{\n          flex: 1,\n          justifyContent: 'center',\n          alignItems: 'center',\n          backgroundColor: color.background.secondary,\n          flexDirection: landscape ? 'row' : 'column',\n        }}\n      >\n        <View>\n          {game.board.map((row, i) => (\n            <View key={`row-${i}`} style={{ flexDirection: 'row' }}>\n              {row.map((_, j) => (\n                <TouchableOpacity\n                  disabled={\n                    game.board[i][j] !== 0 || game.state === 'game-over'\n                  }\n                  key={`cell-${i}${j}`}\n                  onPress={onCellPress(i, j)}\n                  style={{\n                    width: size,\n                    height: size,\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                    backgroundColor: color.background.primaryA,\n                    borderWidth: 2,\n                    borderColor: color.background.secondary,\n                  }}\n                >\n                  <Text title={getValue(game.board[i][j])} type=\"h4\" />\n                </TouchableOpacity>\n              ))}\n            </View>\n          ))}\n        </View>\n        <View style={{ alignItems: 'center' }}>\n          <Text title={turnTitle} />\n          <Button onPress={onButtonPress} title={buttonTitle} />\n        </View>\n      </View>\n    </Screen>\n  );\n});\n","import { createStackNavigator } from '@react-navigation/stack';\nimport React, { memo } from 'react';\nimport { Archero } from './Archero';\nimport { FlappyBird } from './FlappyBird';\nimport { Landing } from './Landing';\nimport { PapiJump } from './PapiJump';\nimport { Snake } from './Snake';\nimport { TicTacToe } from './TicTacToe';\nimport { ArcadeRoutes } from './types';\n\nconst noHeader = { headerShown: false };\nconst Stack = createStackNavigator<ArcadeRoutes>();\n\nexport default memo(function Games() {\n  return (\n    <Stack.Navigator screenOptions={noHeader}>\n      <Stack.Screen component={Landing} name=\"landing\" />\n      <Stack.Screen component={FlappyBird} name=\"flappy-bird\" />\n      <Stack.Screen component={Snake} name=\"snake\" />\n      <Stack.Screen component={PapiJump} name=\"papi-jump\" />\n      <Stack.Screen component={Archero} name=\"archero\" />\n      <Stack.Screen component={TicTacToe} name=\"tic-tac-toe\" />\n    </Stack.Navigator>\n  );\n});\n"],"sourceRoot":""}