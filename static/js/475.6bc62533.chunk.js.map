{"version":3,"file":"static/js/475.6bc62533.chunk.js","mappings":"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","sources":["apps/Arcade/Archero/index.tsx","apps/Arcade/FlappyBird/index.tsx","apps/Arcade/types.ts","apps/Arcade/Landing/index.tsx","apps/Arcade/PapiJump/index.tsx","apps/Arcade/Snake/index.web.tsx","apps/Arcade/TicTacToe/utils.ts","apps/Arcade/TicTacToe/index.tsx","apps/Arcade/index.tsx"],"sourcesContent":["import { useNavigation } from '@react-navigation/native';\nimport React, { memo, useCallback, useRef, useState } from 'react';\nimport {\n  Animated,\n  LayoutChangeEvent,\n  PanResponder,\n  PanResponderInstance,\n  View,\n} from 'react-native';\nimport { Screen } from '../../../components';\nimport { colorWithOpacity, useColor, useDriver } from '../../../features';\nimport { useRootSelector } from '../../../redux';\n\nconst charSize = 50;\nconst charSpeed = 40;\nconst fps = 1000 / 60;\n\nconst getLimit = (value: number, limit: number) =>\n  value > limit ? limit : value < -limit ? -limit : value;\nconst getBounds = (value: number, limit: number, size: number) =>\n  value > limit - size ? limit - size : value < 0 ? 0 : value;\n\nexport const Archero = memo(function Archero() {\n  const color = useColor();\n  const { goBack } = useNavigation();\n  const useNativeDriver = useDriver();\n  const timer = useRef(false);\n  const interval = useRef<ReturnType<typeof setInterval> | null>(null);\n  const gesture = useRef({ x0: 0, y0: 0, dx: 0, dy: 0 });\n  const window = useRootSelector((state) => state.dimension.window);\n  const [dimensions, setDimensions] = useState({ width: 1000, height: 1000 });\n  const { width, height } = dimensions;\n  const smallest = width > height ? height : width;\n  const joystickSize = smallest / 3;\n  const joystickCenter = joystickSize / 2;\n  const thumbSize = joystickSize / 3;\n  const initialJoystickLoc = {\n    x: width / 2 - joystickCenter,\n    y: height - joystickSize - 75,\n  };\n  const initialCharLoc = {\n    x: width / 2 - charSize / 2,\n    y: height / 2 - charSize / 2,\n  };\n  const initialThumbLoc = { x: 0, y: 0 };\n  let characterValueXY = initialCharLoc;\n  const joystick: Animated.ValueXY = new Animated.ValueXY(initialJoystickLoc);\n  const thumb: Animated.ValueXY = new Animated.ValueXY(initialThumbLoc);\n  const character: Animated.ValueXY = new Animated.ValueXY(initialCharLoc);\n  character.addListener(({ x, y }) => {\n    characterValueXY = { x, y };\n  });\n\n  const moveCharacter = () => {\n    const { dx, dy } = gesture.current;\n    const vx = getLimit(dx, charSpeed);\n    const vy = getLimit(dy, charSpeed);\n    const x = getBounds(characterValueXY.x + vx, width, charSize);\n    const y = getBounds(characterValueXY.y + vy, height, charSize);\n    Animated.spring(character, {\n      toValue: { x, y },\n      useNativeDriver,\n    }).start();\n  };\n\n  const moveThumb = () => {\n    const { dx, dy } = gesture.current;\n    const angle = Math.atan2(dx, dy);\n    const dz = Math.sqrt(dx ** 2 + dy ** 2);\n    const z = getLimit(dz, thumbSize);\n    const x = z * Math.sin(angle);\n    const y = z * Math.cos(angle);\n    Animated.spring(thumb, {\n      toValue: { x, y },\n      useNativeDriver,\n    }).start();\n  };\n\n  const moveJoystick = () => {\n    const { x0, y0 } = gesture.current;\n    const offset = window.height - dimensions.height;\n    const offset2 = window.width - dimensions.width;\n    const toValue = {\n      x: x0 - joystickCenter - offset2 / 2,\n      y: y0 - joystickCenter - offset / 2 - joystickSize / 1.5,\n    };\n    Animated.spring(joystick, { toValue, useNativeDriver }).start();\n  };\n\n  const resetJoystick = () => {\n    Animated.spring(joystick, {\n      toValue: initialJoystickLoc,\n      useNativeDriver,\n    }).start();\n    Animated.spring(thumb, {\n      toValue: initialThumbLoc,\n      useNativeDriver,\n    }).start();\n  };\n\n  const onUpdate = () => {\n    interval.current = setInterval(() => {\n      if (!timer.current) {\n        if (interval.current) clearInterval(interval.current);\n\n        resetJoystick();\n        return;\n      }\n      moveJoystick();\n      moveCharacter();\n      moveThumb();\n    }, fps);\n  };\n\n  const panGesture: PanResponderInstance = PanResponder.create({\n    onStartShouldSetPanResponder: () => true,\n    onMoveShouldSetPanResponderCapture: () => true,\n    onPanResponderStart: (_, g) => {\n      timer.current = true;\n      gesture.current = { x0: g.x0, y0: g.y0, dx: g.dx, dy: g.dy };\n      onUpdate();\n    },\n    onPanResponderMove: (_, g) => {\n      gesture.current = { x0: g.x0, y0: g.y0, dx: g.dx, dy: g.dy };\n    },\n    onPanResponderRelease: () => {\n      timer.current = false;\n    },\n  });\n\n  const onLayout = useCallback((event: LayoutChangeEvent) => {\n    const { layout } = event.nativeEvent;\n    setDimensions({ width: layout.width, height: layout.height });\n  }, []);\n\n  return (\n    <Screen onLeftPress={goBack} title=\"Archero\">\n      <View\n        onLayout={onLayout}\n        style={{ flex: 1, backgroundColor: color.background.tertiary }}\n        {...panGesture.panHandlers} // eslint-disable-line react/jsx-props-no-spreading\n      >\n        <Animated.View\n          style={[\n            character.getLayout(),\n            {\n              width: charSize,\n              height: charSize,\n              backgroundColor: color.background.accent,\n            },\n          ]}\n        />\n        <Animated.View\n          style={[\n            joystick.getLayout(),\n            {\n              justifyContent: 'center',\n              alignItems: 'center',\n              borderRadius: 500,\n              width: joystickSize,\n              height: joystickSize,\n              backgroundColor: color.overlay.light,\n            },\n          ]}\n        >\n          <View\n            style={{\n              justifyContent: 'center',\n              alignItems: 'center',\n              borderRadius: 500,\n              width: thumbSize,\n              height: thumbSize,\n              backgroundColor: color.overlay.light,\n            }}\n          >\n            <Animated.View\n              style={[\n                thumb.getLayout(),\n                {\n                  borderRadius: 500,\n                  width: thumbSize,\n                  height: thumbSize,\n                  backgroundColor: colorWithOpacity(\n                    color.background.accent,\n                    0.8,\n                  ),\n                },\n              ]}\n            />\n          </View>\n        </Animated.View>\n      </View>\n    </Screen>\n  );\n});\n","import { useNavigation } from '@react-navigation/native';\nimport React, { memo, useCallback, useEffect, useRef } from 'react';\nimport { Animated, View } from 'react-native';\nimport { Screen } from '../../../components';\nimport { useColor, useDriver } from '../../../features';\n\nconst Bird = () => {\n  const color = useColor();\n  return (\n    <Animated.View\n      style={{\n        backgroundColor: color.background.negative,\n        width: 50,\n        height: 50,\n      }}\n    />\n  );\n};\n\nconst Pillar = () => {\n  const color = useColor();\n  const useNativeDriver = useDriver();\n  const location = useRef(new Animated.ValueXY({ x: 0, y: 0 }));\n  const state = useRef({ x: 0, y: 0, direction: 1 });\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const { y, direction } = state.current;\n      state.current.y = y + Number(direction);\n      Animated.spring(location.current, {\n        toValue: state.current,\n        useNativeDriver,\n      }).start();\n    }, 20);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [useNativeDriver, location]);\n\n  const onPress = useCallback(() => {\n    state.current.direction = -1;\n  }, []);\n\n  return (\n    <Animated.View\n      onTouchStart={onPress}\n      style={[\n        location.current.getLayout(),\n        {\n          backgroundColor: color.background.positive,\n          width: 50,\n          height: 50,\n        },\n      ]}\n    />\n  );\n};\n\nexport const FlappyBird = memo(function FlappyBird() {\n  const color = useColor();\n  const { goBack } = useNavigation();\n\n  return (\n    <Screen onLeftPress={goBack} title=\"Flappy Bird\">\n      <View style={{ flex: 1, backgroundColor: color.background.secondary }}>\n        <Bird />\n        <Pillar />\n      </View>\n    </Screen>\n  );\n});\n","import { StackNavigationProp } from '@react-navigation/stack';\n\ntype Routes =\n  | 'landing'\n  | 'flappy-bird'\n  | 'snake'\n  | 'papi-jump'\n  | 'archero'\n  | 'tic-tac-toe';\n\nexport type ArcadeRoutes = { [key in Routes]: undefined };\n\nexport type ArcadeNavigation = StackNavigationProp<ArcadeRoutes>;\n\nexport const arcadeScreens: Routes[] = [\n  'landing',\n  'flappy-bird',\n  'snake',\n  'papi-jump',\n  'archero',\n  'tic-tac-toe',\n];\n","import { useNavigation } from '@react-navigation/native';\nimport React, { memo, useCallback } from 'react';\nimport { ScrollView } from 'react-native';\nimport { Button, Screen } from '../../../components';\nimport { useAdminNavBack, useColor } from '../../../features';\nimport { ArcadeNavigation, arcadeScreens } from '../types';\n\nexport const Landing = memo(function Landing() {\n  const color = useColor();\n  const { navigate } = useNavigation<ArcadeNavigation>();\n  const { onLeftPress } = useAdminNavBack();\n  const onPress = useCallback((screen) => () => navigate(screen), [navigate]);\n\n  return (\n    <Screen onLeftPress={onLeftPress} title=\"Arcade\">\n      <ScrollView style={{ backgroundColor: color.background.secondary }}>\n        {arcadeScreens.map((screen) => (\n          <Button key={screen} onPress={onPress(screen)} title={screen} />\n        ))}\n      </ScrollView>\n    </Screen>\n  );\n});\n","import { useNavigation } from '@react-navigation/native';\nimport React, { memo, useEffect, useRef } from 'react';\nimport { Animated, Easing, StyleSheet, View } from 'react-native';\nimport { Screen } from '../../../components';\nimport { useColor, useDriver, useDropShadow } from '../../../features';\n\ntype PapiProps = { size: number };\n\nconst Papi = memo(function PapiMemo({ size }: PapiProps) {\n  const color = useColor();\n  const dropShadow = useDropShadow();\n  const useNativeDriver = useDriver();\n  const location = useRef(new Animated.ValueXY({ x: 0, y: 0 })).current;\n\n  useEffect(() => {\n    const toValue = { x: 300, y: 600 };\n    Animated.timing(location, {\n      toValue,\n      duration: 3000,\n      easing: Easing.bounce,\n      useNativeDriver,\n    }).start();\n  }, [location, useNativeDriver]);\n\n  return (\n    <Animated.View\n      style={[\n        location.getLayout(),\n        {\n          height: size,\n          width: size,\n          borderRadius: size,\n          backgroundColor: color.background.positive,\n          ...dropShadow(5),\n        },\n      ]}\n    />\n  );\n});\n\nexport const PapiJump = memo(function PapiJump() {\n  const color = useColor();\n  const { goBack } = useNavigation();\n  const styles = StyleSheet.create({\n    container: {\n      backgroundColor: color.background.secondary,\n      flex: 1,\n    },\n  });\n\n  return (\n    <Screen onLeftPress={goBack} title=\"Papi Jump\">\n      <View style={styles.container}>\n        <Papi size={50} />\n      </View>\n    </Screen>\n  );\n});\n","import { useNavigation } from '@react-navigation/native';\nimport React, { memo } from 'react';\nimport { Screen } from '../../../components';\n\nexport const Snake = memo(function Snake() {\n  const { goBack } = useNavigation();\n\n  return <Screen onLeftPress={goBack} title=\"Snake\" />;\n});\n","import { Board, BoardValue, Direction, PlayerTurn, State } from './types';\n\ntype DfsProps = {\n  c?: number;\n  d: Direction;\n  i: number;\n  j: number;\n  m: Board;\n  t: BoardValue;\n};\n\nconst dfs = ({ m, d, i, j, t, c = 0 }: DfsProps): number => {\n  if (i < 0 || j < 0 || i >= m.length || j >= m[0].length || m[i][j] !== t)\n    return 0;\n  const next = c + 1;\n  return Math.max(dfs({ m, d, i: i + d[0], j: j + d[1], t, c: next }), next);\n};\n\ntype WinnerProps = { board: Board; boardSize: number; i: number; j: number };\n\nexport const getWinner = ({\n  board,\n  i,\n  j,\n  boardSize,\n}: WinnerProps): BoardValue => {\n  const t = board[i][j];\n  const row =\n    dfs({ m: board, d: [0, -1], i, j, t }) +\n    dfs({ m: board, d: [0, 1], i, j, t }) -\n    1;\n  const col =\n    dfs({ m: board, d: [-1, 0], i, j, t }) +\n    dfs({ m: board, d: [1, 0], i, j, t }) -\n    1;\n  const dRow =\n    dfs({ m: board, d: [-1, -1], i, j, t }) +\n    dfs({ m: board, d: [1, 1], i, j, t }) -\n    1;\n  const dCol =\n    dfs({ m: board, d: [-1, 1], i, j, t }) +\n    dfs({ m: board, d: [1, -1], i, j, t }) -\n    1;\n  return Math.max(row, col, dRow, dCol) === boardSize ? t : 0;\n};\n\nexport const getValue = (n: number): string =>\n  n === 0 ? '' : n === 1 ? 'x' : 'o';\n\nexport const getNextValue = (turn: PlayerTurn): BoardValue =>\n  turn === 'white' ? 1 : -1;\n\ntype UpdateBoardProps = { board: Board; i: number; j: number; v: BoardValue };\n\nexport const getUpdatedBoard = ({\n  board,\n  i,\n  j,\n  v,\n}: UpdateBoardProps): Board => {\n  const copy = [...board];\n  copy[i][j] = v;\n  return copy;\n};\n\nexport const getInitialState = (boardSize: number): State => {\n  const board: Board = [];\n  for (let i = 0; i < boardSize; i++) {\n    const row: BoardValue[] = [];\n    for (let j = 0; j < boardSize; j++) row.push(0);\n    board.push(row);\n  }\n  return { board, turn: 'white', state: 'playing', winner: null };\n};\n","import { useNavigation } from '@react-navigation/native';\nimport React, { memo, useCallback, useState } from 'react';\nimport { View } from 'react-native';\nimport { v4 } from 'uuid';\nimport { Button, Screen, Text } from '../../../components';\nimport { TouchableOpacity } from '../../../conversions';\nimport { useColor } from '../../../features';\nimport {\n  getLandscapeOrientation,\n  getSmallestDimension,\n  useRootSelector,\n} from '../../../redux';\nimport { State } from './types';\nimport {\n  getInitialState,\n  getNextValue,\n  getUpdatedBoard,\n  getValue,\n  getWinner,\n} from './utils';\n\nexport const TicTacToe = memo(function TicTacToe() {\n  const boardSize = 3;\n  const color = useColor();\n  const { goBack } = useNavigation();\n\n  const [game, setGame] = useState<State>(getInitialState(boardSize));\n  const smallest = useRootSelector(getSmallestDimension);\n  const landscape = useRootSelector(getLandscapeOrientation);\n  const size = smallest / (boardSize + 1);\n  const buttonTitle = game.state === 'game-over' ? 'new game' : 'reset';\n  const turnTitle = game.winner\n    ? `winner ${game.winner}`\n    : `${game.turn}'s move`;\n\n  const onButtonPress = useCallback(() => {\n    setGame(getInitialState(boardSize));\n  }, []);\n\n  const onCellPress = useCallback(\n    (i: number, j: number) => () => {\n      setGame((p) => {\n        const v = getNextValue(p.turn);\n        const updatedBoard = getUpdatedBoard({ board: p.board, i, j, v });\n        const didWin = getWinner({ board: p.board, i, j, boardSize });\n        const winner = didWin === 1 ? 'white' : didWin === -1 ? 'black' : null;\n        return {\n          ...p,\n          board: updatedBoard,\n          turn: p.turn === 'white' ? 'black' : 'white',\n          state: didWin === 0 ? 'playing' : 'game-over',\n          winner,\n        };\n      });\n    },\n    [],\n  );\n\n  return (\n    <Screen onLeftPress={goBack} title=\"Tic Tac Toe\">\n      <View\n        style={{\n          flex: 1,\n          justifyContent: 'center',\n          alignItems: 'center',\n          backgroundColor: color.background.secondary,\n          flexDirection: landscape ? 'row' : 'column',\n        }}\n      >\n        <View>\n          {game.board.map((row, i) => (\n            <View key={v4()} style={{ flexDirection: 'row' }}>\n              {row.map((_, j) => (\n                <TouchableOpacity\n                  disabled={\n                    game.board[i][j] !== 0 || game.state === 'game-over'\n                  }\n                  key={v4()}\n                  onPress={onCellPress(i, j)}\n                  style={{\n                    width: size,\n                    height: size,\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                    backgroundColor: color.background.primaryA,\n                    borderWidth: 2,\n                    borderColor: color.background.secondary,\n                  }}\n                >\n                  <Text title={getValue(game.board[i][j])} type=\"h4\" />\n                </TouchableOpacity>\n              ))}\n            </View>\n          ))}\n        </View>\n        <View style={{ alignItems: 'center' }}>\n          <Text title={turnTitle} />\n          <Button onPress={onButtonPress} title={buttonTitle} />\n        </View>\n      </View>\n    </Screen>\n  );\n});\n","import { createStackNavigator } from '@react-navigation/stack';\nimport React, { memo } from 'react';\nimport { Archero } from './Archero';\nimport { FlappyBird } from './FlappyBird';\nimport { Landing } from './Landing';\nimport { PapiJump } from './PapiJump';\nimport { Snake } from './Snake';\nimport { TicTacToe } from './TicTacToe';\nimport { ArcadeRoutes } from './types';\n\nconst noHeader = { headerShown: false };\nconst Stack = createStackNavigator<ArcadeRoutes>();\n\nexport default memo(function Games() {\n  return (\n    <Stack.Navigator screenOptions={noHeader}>\n      <Stack.Screen component={Landing} name=\"landing\" />\n      <Stack.Screen component={FlappyBird} name=\"flappy-bird\" />\n      <Stack.Screen component={Snake} name=\"snake\" />\n      <Stack.Screen component={PapiJump} name=\"papi-jump\" />\n      <Stack.Screen component={Archero} name=\"archero\" />\n      <Stack.Screen component={TicTacToe} name=\"tic-tac-toe\" />\n    </Stack.Navigator>\n  );\n});\n"],"names":["charSize","getLimit","value","limit","getBounds","size","Archero","memo","color","useColor","goBack","useNavigation","useNativeDriver","useDriver","timer","useRef","interval","gesture","x0","y0","dx","dy","window","useRootSelector","state","dimension","useState","width","height","dimensions","setDimensions","joystickSize","joystickCenter","thumbSize","initialJoystickLoc","x","y","initialCharLoc","initialThumbLoc","characterValueXY","joystick","Animated","thumb","character","addListener","onUpdate","current","setInterval","clearInterval","toValue","start","offset","offset2","moveJoystick","vx","vy","moveCharacter","angle","Math","atan2","dz","sqrt","z","sin","cos","moveThumb","panGesture","PanResponder","onStartShouldSetPanResponder","onMoveShouldSetPanResponderCapture","onPanResponderStart","_","g","onPanResponderMove","onPanResponderRelease","onLayout","useCallback","event","layout","nativeEvent","onLeftPress","title","View","style","flex","backgroundColor","background","tertiary","panHandlers","getLayout","accent","justifyContent","alignItems","borderRadius","overlay","light","colorWithOpacity","Bird","negative","Pillar","location","direction","useEffect","Number","onPress","onTouchStart","positive","FlappyBird","secondary","arcadeScreens","Landing","navigate","useAdminNavBack","screen","ScrollView","map","key","Papi","dropShadow","useDropShadow","duration","easing","Easing","PapiJump","styles","StyleSheet","container","Snake","dfs","m","d","i","j","t","c","length","next","max","getInitialState","boardSize","board","row","push","turn","winner","TicTacToe","game","setGame","smallest","getSmallestDimension","landscape","getLandscapeOrientation","buttonTitle","turnTitle","onButtonPress","onCellPress","p","v","updatedBoard","copy","getUpdatedBoard","didWin","col","dRow","dCol","getWinner","flexDirection","v4","disabled","primaryA","borderWidth","borderColor","n","type","noHeader","headerShown","Stack","createStackNavigator","Navigator","screenOptions","Screen","component","name"],"sourceRoot":""}