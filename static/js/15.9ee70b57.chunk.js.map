{"version":3,"sources":["apps/Focus/screens/Daily/index.tsx","apps/Focus/screens/Details/index.tsx","apps/Focus/screens/Hourly/ListSection.tsx","apps/Focus/screens/Hourly/ListItem.tsx","apps/Focus/configs.ts","apps/Focus/screens/Hourly/utils.ts","apps/Focus/screens/Hourly/index.tsx","apps/Focus/screens/Profile/index.tsx","apps/Focus/navigation.tsx","apps/Focus/index.tsx"],"names":["Daily","memo","dropShadow","title","Details","navigate","useNavigation","route","useRoute","onModalClose","useCallback","onBackgroundPress","params","item","ListSection","color","useColor","View","style","alignItems","borderTopColor","border","secondary","borderTopWidth","flexDirection","justifyContent","marginTop","padding","dayOfMonth","type","month","dayOfWeek","ListItem","showSection","currentItem","future","id","Date","now","iconColor","onPress","borderColor","background","accent","primaryA","borderLeftWidth","flex","disabled","paddingHorizontal","paddingVertical","width","name","size","paddingRight","hour","zone","ellipsizeMode","numberOfLines","itemHeight","initialIndex","dayjs","startOf","add","diff","getItemLayout","_","index","length","offset","getCurrentItem","currentTime","before","setHours","getHours","after","getFirstItemOfDay","items","keyExtractor","String","getMoreItems","group","i","lastItem","valueOf","next","subtract","push","Math","random","format","Hourly","onLeftPress","useAdminNavBack","useState","loading","setLoading","setItems","addMoreItems","moreItems","styles","StyleSheet","create","list","opacity","height","position","renderItem","useEffect","setTimeout","FlatList","data","initialNumToRender","initialScrollIndex","inverted","keyboardShouldPersistTaps","onEndReached","onEndReachedThreshold","ActivityIndicator","Profile","AuthStack","createStackNavigator","TabBar","createBottomTabNavigator","Tabs","tabIcons","useMemo","hourly","focused","unFocused","daily","profile","screenOptions","tabScreenOptions","useNavScreenOptions","Navigator","Screen","component","Navigation","modalScreenOptions"],"mappings":"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","file":"static/js/15.9ee70b57.chunk.js","sourcesContent":["import React, {memo} from 'react';\nimport {Screen} from '../../../../components';\n\nexport const Daily = memo(function Daily() {\n  return <Screen dropShadow title=\"Daily\" />;\n});\n","import {useNavigation, useRoute} from '@react-navigation/native';\nimport React, {memo, useCallback} from 'react';\nimport {Modal, Text} from '../../../../components';\nimport {ItemScreenNavigationProp, ItemScreenRouteProp} from '../../types';\n\nexport const Details = memo(function Details() {\n  const {navigate} = useNavigation<ItemScreenNavigationProp>();\n  const route = useRoute<ItemScreenRouteProp>();\n\n  const onModalClose = useCallback(() => {\n    navigate('home');\n  }, [navigate]);\n\n  return (\n    <Modal onBackgroundPress={onModalClose}>\n      <Text title={route.params.item.title || 'empty'} />\n    </Modal>\n  );\n});\n","import React, {memo} from 'react';\nimport {View} from 'react-native';\nimport {Text} from '../../../../components';\nimport {padding, useColor} from '../../../../features';\nimport {Item} from '../../types';\n\ntype Props = {\n  item: Item;\n};\n\nexport const ListSection = memo(function ListSection({item}: Props) {\n  const color = useColor();\n  return (\n    <View\n      style={{\n        alignItems: 'center',\n        borderTopColor: color.border.secondary,\n        borderTopWidth: 1,\n        flexDirection: 'row',\n        justifyContent: 'center',\n        marginTop: padding(2),\n        padding: padding(2),\n      }}>\n      <Text title={item.dayOfMonth} type=\"h4\" />\n      <Text title={` ${item.month}, ${item.dayOfWeek}`} type=\"overline\" />\n    </View>\n  );\n});\n","import {useNavigation} from '@react-navigation/core';\nimport React, {memo, useCallback} from 'react';\nimport {View} from 'react-native';\nimport {Icon, Text, TouchableOpacity} from '../../../../components';\nimport {padding, useColor} from '../../../../features';\nimport {HomeScreenNavigationProp, Item} from '../../types';\nimport {ListSection} from './ListSection';\n\ntype Props = {\n  showSection: boolean;\n  item: Item;\n  currentItem: boolean;\n};\n\nexport const ListItem = memo(function ListItem({\n  showSection,\n  item,\n  currentItem,\n}: Props) {\n  const color = useColor();\n  const future = item.id > Date.now();\n  const iconColor = future ? 'tertiary' : 'positive';\n  const title = currentItem ? 'current' : future ? 'future' : item.title;\n  const {navigate} = useNavigation<HomeScreenNavigationProp>();\n\n  const onPress = useCallback(\n    () => navigate('details', {item}),\n    [item, navigate],\n  );\n\n  return (\n    <View\n      style={{\n        borderColor: currentItem\n          ? color.background.accent\n          : color.background.primaryA,\n        borderLeftWidth: padding(1),\n        flex: 1,\n      }}>\n      <TouchableOpacity\n        disabled={future}\n        onPress={onPress}\n        style={{\n          flex: 1,\n          flexDirection: 'row',\n          paddingHorizontal: padding(4),\n          paddingVertical: padding(2),\n        }}>\n        <View\n          style={{\n            flexDirection: 'row',\n            width: padding(20),\n          }}>\n          <Icon\n            color={iconColor}\n            name={future ? 'cancel' : 'checkbox-blank-circle'}\n            size={14}\n            style={{paddingRight: padding(1)}}\n          />\n          <Text title={`${item.hour} ${item.zone}`} />\n        </View>\n        <Text\n          color=\"secondary\"\n          ellipsizeMode=\"tail\"\n          flex\n          numberOfLines={1}\n          title={title}\n          type=\"body1\"\n        />\n      </TouchableOpacity>\n      {showSection && <ListSection item={item} />}\n    </View>\n  );\n});\n","import {padding} from '../../features';\n\nexport const itemHeight = padding(10);\nexport const infiniteScrollRegeneration = 100;\n","import dayjs from 'dayjs';\nimport {infiniteScrollRegeneration, itemHeight} from '../../configs';\nimport {Item} from '../../types';\n\nexport const initialIndex =\n  dayjs().startOf('day').add(2, 'day').diff(dayjs(), 'hour') - 4;\n\nexport const getItemLayout = (\n  _: Item[] | null | undefined,\n  index: number,\n): {length: number; offset: number; index: number} => ({\n  length: itemHeight,\n  offset: itemHeight * index,\n  index,\n});\n\nexport const getCurrentItem = (item: Item): boolean => {\n  const currentTime = new Date();\n  const before = currentTime.setHours(currentTime.getHours() - 1);\n  const after = currentTime.setHours(currentTime.getHours() + 1);\n  const between = item.id > before && item.id < after;\n  return between;\n};\n\nexport const getFirstItemOfDay = (\n  index: number,\n  item: Item,\n  items: Item[],\n): boolean =>\n  index < 1 ? false : item.dayOfMonth !== items[index - 1].dayOfMonth;\n\nexport const keyExtractor = (item: Item): string => String(item.id);\n\nexport const getMoreItems = (items: Item[]): Item[] => {\n  const group = [...items];\n  for (let i = 0; i < infiniteScrollRegeneration; i++) {\n    const lastItem =\n      group.length === 0\n        ? dayjs().startOf('day').add(2, 'day').valueOf()\n        : group[group.length - 1].id;\n    const next = dayjs(lastItem).subtract(1, 'hour');\n    const id = next.valueOf();\n    group.push({\n      title: String(Math.random()) + String(Math.random()),\n      dayOfMonth: next.format('D'),\n      dayOfWeek: next.format('ddd'),\n      hour: next.format('h'),\n      id,\n      month: next.format('MMM'),\n      zone: next.format('a'),\n    });\n  }\n  return group;\n};\n","import React, {memo, useCallback, useEffect, useState} from 'react';\nimport {\n  ActivityIndicator,\n  FlatList,\n  ListRenderItem,\n  StyleSheet,\n} from 'react-native';\nimport {Screen} from '../../../../components';\nimport {useAdminNavBack} from '../../../../features';\nimport {Item} from '../../types';\nimport {ListItem} from './ListItem';\nimport {\n  getCurrentItem,\n  getFirstItemOfDay,\n  getItemLayout,\n  getMoreItems,\n  initialIndex,\n  keyExtractor,\n} from './utils';\n\nexport const Hourly = memo(function Hourly() {\n  const {onLeftPress} = useAdminNavBack();\n  const [loading, setLoading] = useState(true);\n  const [items, setItems] = useState<Item[]>(() => getMoreItems([]));\n\n  const addMoreItems = useCallback(() => {\n    const moreItems = getMoreItems(items);\n    setItems(moreItems);\n  }, [items]);\n\n  const styles = StyleSheet.create({\n    list: {\n      opacity: loading ? 0 : 1,\n    },\n    loading: {\n      height: '100%',\n      position: 'absolute',\n      width: '100%',\n    },\n  });\n\n  const renderItem = useCallback<ListRenderItem<Item>>(\n    ({item, index}) => (\n      <ListItem\n        currentItem={getCurrentItem(item)}\n        item={item}\n        showSection={getFirstItemOfDay(index, item, items)}\n      />\n    ),\n    [items],\n  );\n\n  useEffect(() => {\n    if (loading && items.length > 0) setTimeout(() => setLoading(false), 1000);\n  }, [items.length, loading]);\n\n  return (\n    <Screen dropShadow onLeftPress={onLeftPress} title=\"Hourly\">\n      <FlatList\n        data={items}\n        getItemLayout={getItemLayout}\n        initialNumToRender={0}\n        initialScrollIndex={initialIndex}\n        inverted\n        keyExtractor={keyExtractor}\n        keyboardShouldPersistTaps=\"handled\"\n        onEndReached={addMoreItems}\n        onEndReachedThreshold={0.5}\n        renderItem={renderItem}\n        style={styles.list}\n      />\n      {loading && <ActivityIndicator size=\"large\" style={styles.loading} />}\n    </Screen>\n  );\n});\n","import React, {memo} from 'react';\nimport {Screen, Text} from '../../../../components';\n\nexport const Profile = memo(function Profile() {\n  return (\n    <Screen dropShadow title=\"Profile\">\n      <Text title=\"Profile\" />\n    </Screen>\n  );\n});\n","import {createBottomTabNavigator} from '@react-navigation/bottom-tabs';\nimport {createStackNavigator} from '@react-navigation/stack';\nimport React, {ReactElement, useMemo} from 'react';\nimport {useNavScreenOptions} from '../../features';\nimport {\n  AuthStackRoutes,\n  HomeTabRoutes,\n  UnAuthStackRoutes,\n} from './navigationTypes';\nimport {Daily, Details, Hourly, Landing, Profile} from './screens';\n\nconst AuthStack = createStackNavigator<AuthStackRoutes>();\nconst UnAuthStack = createStackNavigator<UnAuthStackRoutes>();\nconst TabBar = createBottomTabNavigator<HomeTabRoutes>();\n\nconst Tabs = () => {\n  const tabIcons = useMemo(\n    () => ({\n      hourly: {\n        focused: 'format-list-bulleted',\n        unFocused: 'format-list-bulleted',\n      },\n      daily: {\n        focused: 'calendar-month',\n        unFocused: 'calendar-month',\n      },\n      profile: {\n        focused: 'account-outline',\n        unFocused: 'account-outline',\n      },\n    }),\n    [],\n  );\n  const {tabScreenOptions} = useNavScreenOptions();\n  const screenOptions = tabScreenOptions({tabIcons});\n  return (\n    <TabBar.Navigator screenOptions={screenOptions}>\n      <TabBar.Screen component={Hourly} name=\"hourly\" />\n      <TabBar.Screen component={Daily} name=\"daily\" />\n      <TabBar.Screen component={Profile} name=\"profile\" />\n    </TabBar.Navigator>\n  );\n};\n\nexport const Navigation = (): ReactElement => {\n  const {modalScreenOptions} = useNavScreenOptions();\n  const login = false;\n\n  return login ? (\n    <UnAuthStack.Navigator screenOptions={{}}>\n      <UnAuthStack.Screen component={Landing} name=\"landing\" />\n    </UnAuthStack.Navigator>\n  ) : (\n    <AuthStack.Navigator screenOptions={modalScreenOptions}>\n      <AuthStack.Screen component={Tabs} name=\"home\" />\n      <AuthStack.Screen component={Details} name=\"details\" />\n    </AuthStack.Navigator>\n  );\n};\n","import React, {memo} from 'react';\nimport {Navigation} from './navigation';\n\nexport default memo(function Focus() {\n  return <Navigation />;\n});\n"],"sourceRoot":""}